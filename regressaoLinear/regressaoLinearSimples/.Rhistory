#----------------------------------------
pd = read.table('/Users/robsonfernandes/Desktop/trabalho03/desenvolvedores.txt',header=T)
attach(pd)
pd
#----------------------------------------
# DIAGRAMA DE DISPERSÃO
#----------------------------------------
par(mfrow=c(1,1))
#Grafico de Dispersao - Sexo
plot(Experiencia,Salario,xlab="Experiencia",ylab="Salario")
points(Experiencia[Sexo=='M' ],Salario[Sexo=='M'], pch = 19, col="blue")
points(Experiencia[Sexo=='F'],Salario[Sexo=='F'], pch = 19, col="red")
#Grafico de Dispersao - Area (Desenvolvimento)
plot(Experiencia,Salario,xlab="Experiencia",ylab="Salario")
points(Experiencia[Area=='W'],Salario[Area=='W'], pch = 19, col="red") #Area - WEB
points(Experiencia[Area=='D'],Salario[Area=='D'], pch = 19, col="green") #Area - DESKTOP
points(Experiencia[Area=='M'],Salario[Area=='M'], pch = 19, col="black") #Area - MOBILE
points(Experiencia[Area=='Q'],Salario[Area=='Q'], pch = 19, col="yellow") #Area - QUALIDADE E TESTES
#----------------------------------------
# AJUSTE NO MODELO
#----------------------------------------
#Modelo Ajustado
#ajuste = lm(Salario ~ Experiencia + Sexo + Area + Experiencia*Sexo + Experiencia*Area)
modelo = lm(Salario ~ Experiencia + Sexo + Area)
anova(modelo)
summary(modelo)
confint(modelo)
predict(modelo)  # valores preditos pela equação de regressão
residuals(modelo) # valores resíduos
#----------------------------------------
#ANALISE DE RESIDUOS
#----------------------------------------
#Verificando Normalidade dos residuos
shapiro.test(residuals(modelo))
#Diagrama de dispersao
plot(Experiencia,Salario,xlab="Experiencia",ylab="Salario",lwd=2)
abline(modelo) # traÁa o modelo no grafico
points(mean(Experiencia), mean(Salario),col="red",lwd=5,lty=9)
legend(12,680, c("Ajustado","Observado","Media"), lty=c(1,1,9),
col = c("black","black","red"),lwd = c(1, 2, 5))
windows()
plot(fitted(modelo),residuals(modelo),xlab="Valores Ajustados",ylab="Resíduos")
abline(h=0)
windows()
plot(Experiencia,residuals(modelo),xlab="Experiencia",ylab="Resíduos")
abline(h=0)
#BoxPlot
windows()
boxplot(residuals(modelo) ~ Sexo)
#QQ Plot
windows()
qqnorm(residuals(modelo), ylab="Resíduos")
qqline(residuals(modelo))
#----------------------------------------
pd = read.table('/Users/robsonfernandes/Desktop/trabalho03/desenvolvedores.txt',header=T)
attach(pd)
#----------------------------------------
# DIAGRAMA DE DISPERSÃO
#----------------------------------------
par(mfrow=c(1,1))
#Grafico de Dispersao - Sexo
plot(Experiencia,Salario,xlab="Experiencia",ylab="Salario")
points(Experiencia[Sexo=='M' ],Salario[Sexo=='M'], pch = 19, col="blue")
points(Experiencia[Sexo=='F'],Salario[Sexo=='F'], pch = 19, col="red")
#Grafico de Dispersao - Area (Desenvolvimento)
plot(Experiencia,Salario,xlab="Experiencia",ylab="Salario")
points(Experiencia[Area=='W'],Salario[Area=='W'], pch = 19, col="red") #Area - WEB
points(Experiencia[Area=='D'],Salario[Area=='D'], pch = 19, col="green") #Area - DESKTOP
points(Experiencia[Area=='M'],Salario[Area=='M'], pch = 19, col="black") #Area - MOBILE
points(Experiencia[Area=='Q'],Salario[Area=='Q'], pch = 19, col="yellow") #Area - QUALIDADE E TESTES
#----------------------------------------
# AJUSTE NO MODELO
#----------------------------------------
#Modelo Ajustado
#ajuste = lm(Salario ~ Experiencia + Sexo + Area + Experiencia*Sexo + Experiencia*Area)
modelo = lm(Salario ~ Experiencia + Sexo + Area)
anova(modelo)
summary(modelo)
confint(modelo)
predict(modelo)  # valores preditos pela equação de regressão
residuals(modelo) # valores resíduos
#----------------------------------------
#ANALISE DE RESIDUOS
#----------------------------------------
#Verificando Normalidade dos residuos
shapiro.test(residuals(modelo))
#Diagrama de dispersao
plot(Experiencia,Salario,xlab="Experiencia",ylab="Salario",lwd=2)
abline(modelo) # traÁa o modelo no grafico
points(mean(Experiencia), mean(Salario),col="red",lwd=5,lty=9)
legend(12,680, c("Ajustado","Observado","Media"), lty=c(1,1,9),
col = c("black","black","red"),lwd = c(1, 2, 5))
windows()
plot(fitted(modelo),residuals(modelo),xlab="Valores Ajustados",ylab="Resíduos")
abline(h=0)
windows()
plot(Experiencia,residuals(modelo),xlab="Experiencia",ylab="Resíduos")
abline(h=0)
#BoxPlot
windows()
boxplot(residuals(modelo) ~ Sexo)
#QQ Plot
windows()
qqnorm(residuals(modelo), ylab="Resíduos")
qqline(residuals(modelo))
#----------------------------------------
plot(fitted(modelo),residuals(modelo),xlab="Valores Ajustados",ylab="Resíduos")
abline(h=0)
plot(Experiencia,residuals(modelo),xlab="Experiencia",ylab="Resíduos")
abline(h=0)
#BoxPlot
boxplot(residuals(modelo) ~ Sexo)
#QQ Plot
qqnorm(residuals(modelo), ylab="Resíduos")
qqline(residuals(modelo))
plot(fitted(modelo),residuals(modelo),xlab="Valores Ajustados",ylab="Resíduos")
abline(h=0)
plot(Experiencia,residuals(modelo),xlab="Experiencia",ylab="Resíduos")
abline(h=0)
plot(Experiencia,Salario,xlab="Experiencia",ylab="Salario",lwd=2)
abline(modelo) # traÁa o modelo no grafico
points(mean(Experiencia), mean(Salario),col="red",lwd=5,lty=9)
legend(12,680, c("Ajustado","Observado","Media"), lty=c(1,1,9),
col = c("black","black","red"),lwd = c(1, 2, 5))
plot(fitted(modelo),residuals(modelo),xlab="Valores Ajustados",ylab="Resíduos")
abline(h=0)
plot(Salario ~ Experiencia + Sexo + Area)
abline(modelo, col=2, lty=2, lwd=2)
legend("top", legend=c("valores observados", "valores ajustados"), lty=c(NA,2), col=c(1,2), lwd=1:2, bty="n", pch=c(1,NA))
plot(Salario ~ Experiencia + Sexo + Area)
abline(modelo, col=2, lty=2, lwd=2)
legend("top", legend=c("valores observados", "valores ajustados"), lty=c(NA,2), col=c(1,2), lwd=1:2, bty="n", pch=c(1,NA))
plot(Salario ~ Experiencia)
abline(modelo, col=2, lty=2, lwd=2)
legend("top", legend=c("valores observados", "valores ajustados"), lty=c(NA,2), col=c(1,2), lwd=1:2, bty="n", pch=c(1,NA))
plot(Experiencia,Salario,xlab="Experiencia",ylab="Salario",lwd=2)
abline(modelo) # traÁa o modelo no grafico
points(mean(Experiencia), mean(Salario),col="red",lwd=5,lty=9)
legend(12,680, c("Ajustado","Observado","Media"), lty=c(1,1,9),
col = c("black","black","red"),lwd = c(1, 2, 5))
plot(Experiencia,Salario,xlab="Experiencia",ylab="Salario",lwd=2)
abline(modelo) # traÁa o modelo no grafico
points(mean(Experiencia), mean(Salario),col="red",lwd=5,lty=9)
legend(12,680, c("Ajustado","Observado","Media"), lty=c(1,1,9),
col = c("black","black","red"),lwd = c(1, 2, 5))
plot(Salario ~ Experiencia)
abline(modelo, col=2, lty=2, lwd=2)
legend("top", legend=c("valores observados", "valores ajustados"), lty=c(NA,2), col=c(1,2), lwd=1:2, bty="n", pch=c(1,NA))
plot(Experiencia,Salario,xlab="Experiencia",ylab="Salario",lwd=2)
abline(modelo) # traÁa o modelo no grafico
points(mean(Experiencia), mean(Salario),col="red",lwd=5,lty=9)
legend(12,680, c("Ajustado","Observado","Media"), lty=c(1,1,9),
col = c("black","black","red"),lwd = c(1, 2, 5))
plot(Salario ~ Experiencia)
abline(modelo, col=2, lty=2, lwd=2)
points(mean(Experiencia), mean(Salario),col="red",lwd=5,lty=9)
legend("top", legend=c("valores observados", "valores ajustados"), lty=c(NA,2), col=c(1,2), lwd=1:2, bty="n", pch=c(1,NA))
plot(Experiencia,Salario,xlab="Experiencia",ylab="Salario",lwd=2)
abline(modelo) # traÁa o modelo no grafico
points(mean(Experiencia), mean(Salario),col="red",lwd=5,lty=9)
legend(12,680, c("Ajustado","Observado","Media"), lty=c(1,1,9),
col = c("black","black","red"),lwd = c(1, 2, 5))
plot(Salario ~ Experiencia)
abline(modelo, col=2, lty=2, lwd=2)
points(mean(Experiencia), mean(Salario),col="red",lwd=5,lty=9)
legend("top", legend=c("valores observados", "valores ajustados"), lty=c(NA,2), col=c(1,2), lwd=1:2, bty="n", pch=c(1,NA))
plot(Salario ~ Experiencia)
abline(modelo, col=2, lty=2, lwd=2)
points(mean(Experiencia), mean(Salario),col="red",lwd=5,lty=9)
legend("top", legend=c("valores observados", "valores ajustados"), lty=c(NA,2), col=c(1,2), lwd=1:2, bty="n", pch=c(1,NA))
plot(fitted(modelo),residuals(modelo),xlab="Valores Ajustados",ylab="Resíduos")
abline(h=0)
plot(Experiencia,residuals(modelo),xlab="Experiencia",ylab="Resíduos")
abline(h=0)
plot(fitted(modelo),residuals(modelo),xlab="Valores Ajustados",ylab="Resíduos")
abline(h=0)
#Experiencia versus Residuos
plot(Experiencia,residuals(modelo),xlab="Experiencia",ylab="Resíduos")
abline(h=0)
boxplot(residuals(modelo) ~ Sexo)
modelo = lm(Salario ~ Experiencia + Sexo + Area)
anova(modelo)
summary(modelo)
confint(modelo)
modelo = lm(Salario ~ Experiencia + Sexo + Area + Experiencia*Sexo + Experiencia*Area)
anova(modelo)
summary(modelo)
confint(modelo)
modelo = lm(Salario ~ Experiencia + Sexo + AreaQ + Experiencia*Sexo + Experiencia:AreaQ + Experiencia:AreaW)
anova(modelo)
summary(modelo)
modelo = lm(Salario ~ Experiencia - SexoM + AreaQ + Experiencia*Sexo + Experiencia:AreaQ + Experiencia:AreaW)
anova(modelo)
summary(modelo)
predict(modelo)  # valores preditos pela equação de regressão
residuals(modelo) # valores resíduos
modelo = lm(Salario ~ Experiencia - SexoM + AreaQ + Experiencia*Sexo + Experiencia:AreaQ + Experiencia:AreaW)
modelo = lm(Salario ~ Experiencia + Sexo + Area + Experiencia*Sexo + Experiencia*Area)
modelo = lm(Salario ~ Experiencia + Sexo + Area + Experiencia*Sexo + Experiencia*Area)
summary(modelo)
modelo = lm(Salario ~ Experiencia + Sexo + Area + Experiencia*Sexo + Experiencia*Area)
summary(modelo)
modelo = lm(Salario ~ Experiencia + Sexo + Area + Experiencia*Sexo + Experiencia*Area)
summary(modelo)
dataOxigenio = read.table('/Users/robsonfernandes/Desktop/regressao/oxigenio.txt',header=T)
attach(dataOxigenio)
dataOxigenio = read.table('/Users/robsonfernandes/Desktop/regressao/oxigenio.txt',header=T)
attach(dataOxigenio)
#Teste de correla??o - Coeficiente de correla??o de Pearson
cor.test(dataOxigenio$tempo,dataOxigenio$oxigenio)
#----------------------------------------
# DIAGRAMA DE DISPERS?O
#----------------------------------------
plot(tempo,oxigenio,xlab="Tempo",ylab="Oxigenio")
points(mean(tempo), mean(oxigenio),col="red",lwd=5,lty=9)
modelo = lm(tempo ~ oxigenio)
modelo
summary(modelo)
predict(modelo)  # valores preditos pela equacao de regressao
residuals(modelo) # valores residuos
plot(fitted(modelo),residuals(modelo),xlab="Valores Ajustados",ylab="Res?duos")
abline(h=0)
dataOxigenio = read.table('/Users/robsonfernandes/Desktop/regressao/oxigenio.txt',header=T)
attach(dataOxigenio)
dataOxigenio = read.table('/Users/robsonfernandes/Desktop/regressao/oxigenio.txt',header=T)
attach(dataOxigenio)
cor.test(dataOxigenio$tempo,dataOxigenio$oxigenio)
modelo = lm(tempo ~ oxigenio)
modelo
summary(modelo)
modelo = lm(tempo ~ oxigenio- oxigenio)
modelo
summary(modelo)
modelo = lm(tempo ~ oxigenio- oxigenio)
modelo
summary(modelo)
modelo = lm(tempo ~ oxigenio)
modelo
summary(modelo)
modelo = lm(tempo ~ oxigenio- oxigenio)
modelo
summary(modelo)
modelo = lm(tempo ~ oxigenio)
modelo
summary(modelo)
modelo = lm(oxigenio ~ tempo)
modelo
summary(modelo)
modelo = lm(tempo ~ oxigenio)
modelo
summary(modelo)
modelo = lm(tempo ~ oxigenio)
modelo
summary(modelo)
summary(dataOxigenio)
summary(dataOxigenio)
var(dataOxigenio)
sd(dataOxigenio)
sd(dataOxigenio)
var(dataOxigenio)
summary(dataOxigenio)
var(dataOxigenio$tempo)
var(dataOxigenio$oxigenio)
sd(dataOxigenio$tempo)
sd(dataOxigenio$oxigenio)
summary(dataOxigenio)
var(dataOxigenio$tempo)
var(dataOxigenio$oxigenio)
sd(dataOxigenio$tempo)
sd(dataOxigenio$oxigenio)
dataOxigenio = read.table('/Users/robsonfernandes/Desktop/regressao/oxigenio.txt',header=T)
attach(dataOxigenio)
#Estatística Descritiva
summary(dataOxigenio)
var(dataOxigenio$tempo)
var(dataOxigenio$oxigenio)
sd(dataOxigenio$tempo)
sd(dataOxigenio$oxigenio)
#Teste de correlao - Coeficiente de correlacao de Pearson
cor.test(dataOxigenio$tempo,dataOxigenio$oxigenio)
#----------------------------------------
# DIAGRAMA DE DISPERSAO
#----------------------------------------
plot(tempo,oxigenio,xlab="Tempo",ylab="Oxigenio")
points(mean(tempo), mean(oxigenio),col="red",lwd=5,lty=9)
#----------------------------------------
# AJUSTE NO MODELO
#----------------------------------------
#Modelo Ajustado
modelo = lm(tempo ~ oxigenio)
modelo
summary(modelo)
#----------------------------------------
# ANALISE DO MODELO DE REGRESSAO
#----------------------------------------
predict(modelo)  # valores preditos pela equacao de regressao
residuals(modelo) # valores residuos
#Verificando Normalidade dos residuos
shapiro.test(residuals(modelo))
#----------------------------------------
#ANALISE DE RESIDUOS
#----------------------------------------
plot(fitted(modelo),residuals(modelo),xlab="Valores Ajustados",ylab="Residuos")
abline(h=0)
plot(tempo,residuals(modelo),xlab="tempo",ylab="Residuos")
abline(h=0)
qqnorm(residuals(modelo), ylab="Residuos")
qqline(residuals(modelo))
#----------------------------------------
#----------------------------------------
# GRAFICO DE REGRESAO
#----------------------------------------
plot(tempo ~ oxigenio)
abline(modelo, col=2, lty=2, lwd=2)
legend("top", legend=c("valores observados", "valores ajustados"), lty=c(NA,2), col=c(1,2), lwd=1:2, bty="n", pch=c(1,NA))
dataOxigenio = read.table('/Users/robsonfernandes/Desktop/regressao/oxigenio.txt',header=T)
attach(dataOxigenio)
modelo = lm(tempo ~ oxigenio)
modelo
#----------------------------------------
# Robson Fernandes da Silva <robson.fernandes@usp.br>
# N. USP - 10107495
# Trabalho - Regressão Linear
#----------------------------------------
dataOxigenio = read.table('/Users/robsonfernandes/Desktop/regressao/oxigenio.txt',header=T)
attach(dataOxigenio)
#----------------------------------------
# ESTATISTICA DESCRITIVA
#----------------------------------------
summary(dataOxigenio)
var(dataOxigenio$tempo)
var(dataOxigenio$oxigenio)
sd(dataOxigenio$tempo)
sd(dataOxigenio$oxigenio)
#Teste de correlao - Coeficiente de correlacao de Pearson
cor.test(dataOxigenio$tempo,dataOxigenio$oxigenio)
#----------------------------------------
# DIAGRAMA DE DISPERSAO
#----------------------------------------
plot(tempo,oxigenio,xlab="Tempo",ylab="Oxigenio")
points(mean(tempo), mean(oxigenio),col="red",lwd=5,lty=9)
#----------------------------------------
# AJUSTE NO MODELO
#----------------------------------------
#Modelo Ajustado
modelo = lm(tempo ~ oxigenio)
modelo
summary(modelo)
#----------------------------------------
# ANALISE DO MODELO DE REGRESSAO
#----------------------------------------
predict(modelo)  # valores preditos pela equacao de regressao
residuals(modelo) # valores residuos
#Verificando Normalidade dos residuos
shapiro.test(residuals(modelo))
#----------------------------------------
#ANALISE DE RESIDUOS
#----------------------------------------
plot(fitted(modelo),residuals(modelo),xlab="Valores Ajustados",ylab="Residuos")
abline(h=0)
plot(tempo,residuals(modelo),xlab="tempo",ylab="Residuos")
abline(h=0)
qqnorm(residuals(modelo), ylab="Residuos")
qqline(residuals(modelo))
#----------------------------------------
#----------------------------------------
# GRAFICO DE REGRESAO
#----------------------------------------
plot(tempo ~ oxigenio)
abline(modelo, col=2, lty=2, lwd=2)
legend("top", legend=c("valores observados", "valores ajustados"), lty=c(NA,2), col=c(1,2), lwd=1:2, bty="n", pch=c(1,NA))
install.packages("plotly")
library(plotly)
p <- plot_ly(x = ~rnorm(50), type = "histogram")
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = plotly_POST(p, filename="histogram/1")
chart_link
library(plotly)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = ~carat, y = ~price, color = ~carat,
size = ~carat, text = ~paste("Clarity: ", clarity))
alligator = data.frame(
lnLength = c(3.87, 3.61, 4.33, 3.43, 3.81, 3.83, 3.46, 3.76,
3.50, 3.58, 4.19, 3.78, 3.71, 3.73, 3.78),
lnWeight = c(4.87, 3.93, 6.46, 3.33, 4.38, 4.70, 3.50, 4.50,
3.58, 3.64, 5.90, 4.43, 4.38, 4.42, 4.25)
)
xyplot(lnWeight ~ lnLength, data = alligator,
xlab = "Snout vent length (inches) on log scale",
ylab = "Weight (pounds) on log scale",
main = "Alligators in Central Florida"
)
library(plotly)
alligator = data.frame(
lnLength = c(3.87, 3.61, 4.33, 3.43, 3.81, 3.83, 3.46, 3.76,
3.50, 3.58, 4.19, 3.78, 3.71, 3.73, 3.78),
lnWeight = c(4.87, 3.93, 6.46, 3.33, 4.38, 4.70, 3.50, 4.50,
3.58, 3.64, 5.90, 4.43, 4.38, 4.42, 4.25)
)
plot_ly(lnWeight ~ lnLength, data = alligator,
xlab = "Snout vent length (inches) on log scale",
ylab = "Weight (pounds) on log scale",
main = "Alligators in Central Florida"
)
library(plotly)
alligator = data.frame(
lnLength = c(3.87, 3.61, 4.33, 3.43, 3.81, 3.83, 3.46, 3.76,
3.50, 3.58, 4.19, 3.78, 3.71, 3.73, 3.78),
lnWeight = c(4.87, 3.93, 6.46, 3.33, 4.38, 4.70, 3.50, 4.50,
3.58, 3.64, 5.90, 4.43, 4.38, 4.42, 4.25)
)
plot_ly(lnWeight ~ lnLength, data = alligator,
xlab = "Snout vent length (inches) on log scale",
ylab = "Weight (pounds) on log scale",
main = "Alligators in Central Florida"
)
library(plotly)
alligator = data.frame(
lnLength = c(3.87, 3.61, 4.33, 3.43, 3.81, 3.83, 3.46, 3.76,
3.50, 3.58, 4.19, 3.78, 3.71, 3.73, 3.78),
lnWeight = c(4.87, 3.93, 6.46, 3.33, 4.38, 4.70, 3.50, 4.50,
3.58, 3.64, 5.90, 4.43, 4.38, 4.42, 4.25)
)
p <- plot_ly(data = alligator, x = ~lnWeight, y = ~lnLength)
chart_link = plotly_POST(p, filename="scatter/basic")
chart_link
library(plotly)
alligator = data.frame(
lnLength = c(3.87, 3.61, 4.33, 3.43, 3.81, 3.83, 3.46, 3.76,
3.50, 3.58, 4.19, 3.78, 3.71, 3.73, 3.78),
lnWeight = c(4.87, 3.93, 6.46, 3.33, 4.38, 4.70, 3.50, 4.50,
3.58, 3.64, 5.90, 4.43, 4.38, 4.42, 4.25)
)
p <- plot_ly(data = alligator, x = ~lnWeight, y = ~lnLength)
chart_link = plotly_POST(p, filename="scatter/basic")
chart_link
library(plotly)
alligator = data.frame(
lnLength = c(3.87, 3.61, 4.33, 3.43, 3.81, 3.83, 3.46, 3.76,
3.50, 3.58, 4.19, 3.78, 3.71, 3.73, 3.78),
lnWeight = c(4.87, 3.93, 6.46, 3.33, 4.38, 4.70, 3.50, 4.50,
3.58, 3.64, 5.90, 4.43, 4.38, 4.42, 4.25)
)
p <- plot_ly(data = alligator, x = ~lnWeight, y = ~lnLength)
chart_link = plotly_POST(p, filename="scatter/basic")
library(plotly)
alligator = data.frame(
lnLength = c(3.87, 3.61, 4.33, 3.43, 3.81, 3.83, 3.46, 3.76,
3.50, 3.58, 4.19, 3.78, 3.71, 3.73, 3.78),
lnWeight = c(4.87, 3.93, 6.46, 3.33, 4.38, 4.70, 3.50, 4.50,
3.58, 3.64, 5.90, 4.43, 4.38, 4.42, 4.25)
)
p <- plot_ly(data = alligator, x = ~lnWeight, y = ~lnLength)
chart_link = plotly_POST(p)
chart_link
library(plotly)
p <- plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length, color = ~Species)
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = plotly_POST(p, filename="scatter/color")
chart_link
setwd("~/Documents/projetos/data-science/regressaoLinear/regressaoLinearSimples")
#Leitura do Arquivo vendas.txt
vendas = read.table('vendas.txt', header=T)
attach(vendas)
#Diagrama de Dispers??o
plot(trimestre, venda, col=c('red', 'blue', 'green'))
#Coeficiente de Correla????o
cor(trimestre,venda)
#Teste de Hip??teses para a o Coeficiente de Correla????o
cor.test(trimestre,venda)
#Ajuste do Modelo de Regress??o Linear
ajuste.modeloLinear = lm(venda ~ trimestre)
ajuste.modeloLinear
#Teste de Normalidade
shapiro.test(residuals(ajuste.modeloLinear))
# Previs??o de Vendas
predict(ajuste.modeloLinear, newdata=data.frame(trimestre=14))
#Reta ajustada no Diagrama de Dispers??o
plot(trimestre, venda, col=c('red', 'blue', 'green'))
abline(ajuste.modeloLinear)
#Coeficiente de Determina????o
summary(ajuste.modeloLinear)$r.squared
summary(ajuste.modeloLinear)
#Leitura do Arquivo vendas.txt
vendas = read.table('vendas.txt', header=T)
attach(vendas)
#Diagrama de Dispersao
plot(trimestre, venda, col=c('red', 'blue', 'green'))
#Coeficiente de Correlacao
cor(trimestre,venda)
#Teste de Hipoteses para a o Coeficiente de Correlacao
cor.test(trimestre,venda)
#Ajuste do Modelo de Regressao Linear
ajuste.modeloLinear = lm(venda ~ trimestre)
ajuste.modeloLinear
#Teste de Signific??ncia do Modelo
summary(ajuste.modeloLinear)
#Teste de Normalidade
shapiro.test(residuals(ajuste.modeloLinear))
# Previs??o de Vendas
predict(ajuste.modeloLinear, newdata=data.frame(trimestre=14))
#Reta ajustada no Diagrama de Dispers??o
plot(trimestre, venda, col=c('red', 'blue', 'green'))
abline(ajuste.modeloLinear)
#Coeficiente de Determina????o
summary(ajuste.modeloLinear)$r.squared
summary(ajuste.modeloLinear)
cor(trimestre,venda)
cor.test(trimestre,venda)
