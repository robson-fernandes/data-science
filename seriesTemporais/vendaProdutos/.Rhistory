moment(c)
library(e1071)
c = c(1,3,5,6,8,10,15)
moment(c)
sd(c)
sd(c)
moment(c)
sd(c)
sd(c)^4
library(e1071)
c = c(1,3,5,6,8,10,15)
desvioPadrao = sd(c)
variancia  = var(c)
k = 1
momento1 = desvioPadrao^k / variancia^k
library(e1071)
c = c(1,3,5,6,8,10,15)
desvioPadrao = sd(c)
variancia  = var(c)
k = 1
momento1 = desvioPadrao^k / variancia^k
library(e1071)
c = c(1,3,5,6,8,10,15)
desvioPadrao = sd(c)
variancia  = var(c)
k = 1
momento1 = desvioPadrao^k / variancia^k
momento1
moment(c)
library(e1071)
c = c(1,3,5,6,8,10,15)
desvioPadrao = sd(c)
variancia  = var(c)
k = 1
momento1 = desvioPadrao^k / variancia^k
momento1
moment(c)
moment(c, order=1, center=TRUE)
k = 1
momento1 = desvioPadrao^k / variancia^k
momento1
moment(c, order=1, center=TRUE)
moment(c, order=1)
moment(c, order=2)
k = 2
momento1 = desvioPadrao^k / variancia^k
momento1
mean(c)
moment(c, order=1)
desvioPadrao = sd(c)
variancia  = var(c)
moment(c, order=1)
moment(c, order=4)
kurtosis(c)
skewness(c)
moment(c, order=2)
moment(c, order=1)
moment(c, order=2)
moment(c)
moment(c)
moment(c)
moment(c, order=1,center = TRUE)
moment(c, order=2,center = TRUE)
moment(c, order=2,center = TRUE)
variancia  = var(c)
variancia  = var(c)
variancia
moment(c, order=2,center = TRUE)
moment(c, order=3,center = TRUE)
moment(c, order=1,center = TRUE)
-12.428 + 12.429
-12.428 + 12.429 / 6
(-12.428 + 12.429) / 6
moment(c, order=1,center = TRUE)
(-12.428 + 12.429) / 6
moment(c, order=2,center = TRUE)
k = 2
momento1 =  variancia^k / desvioPadrao^k
momento1
k = 1
momento1 =  variancia^k / desvioPadrao^k
momento1
k = 1
momento1 =  variancia^k / desvioPadrao^k
momento1
k = 2
momento1 =  variancia^k / desvioPadrao^k
momento1
library(bnlearn)
library(Rgraphviz)
vendaProdutosDataSet = read.table('vendaProdutos.csv', header=TRUE, sep=";")
attach(vendaProdutosDataSet)
#Modelo da Rede Bayesiana
dag <- model2network("[codProduto][codGrupoVenda|codProduto][quantidadeIntervalo|codGrupoVenda][vendaIntervalo|quantidadeIntervalo:codGrupoVenda][desDiaSemana|vendaIntervalo]")
plot(dag)
#Teste Sazionalidade
friedman.test(serieTemporal)
setwd("~/Documents/projetos/data-science/seriesTemporais/vendaProdutos")
library(forecast)
library(ggplot2)
library(stringi)
#Leitura do Arquivo vendas.txt
vendas = read.table('serieVendas.csv', header=TRUE, sep=";")
vendas$venda<- as.numeric(vendas$venda)
#Serie Temporal
serieTemporal <- ts(vendas$venda, start=c(2010, 1), end=c(2016, 12), frequency=12)
#Teste Estacionariedade
#p-value < 0.05 = serie é estacionária
Box.test(serieTemporal, lag=20, type="Ljung-Box")
#Teste Sazionalidade
friedman.test(serieTemporal)
friedman.test(serieTemporal)
kruskal.test(serieTemporal)
kruskal.test(venda ~ data, data = vendas)
kruskal.test(venda ~ data, data = serieTemporal)
library(forecast)
library(ggplot2)
library(stringi)
#Leitura do Arquivo vendas.txt
vendas = read.table('serieVendas.csv', header=TRUE, sep=";")
vendas$venda<- as.numeric(vendas$venda)
#Serie Temporal
serieTemporal <- ts(vendas$venda, start=c(2010, 1), end=c(2016, 12), frequency=12)
serieTemporal
ruskal.test(venda ~ data, data = vendas)
ruskal.test(venda ~ data, data = vendas)
kruskal.test(venda ~ data, data = vendas)
friedman.test(venda ~ data, data = vendas)
friedman.test(serieTemporal)
vendas[,1:10]
vendas[:]
vendas[1:]
vendas
vendas[1:3]
vendas[1:2]
vendas[1:2]
vendas[1:2:1]
vendas[2:2]
library(stringi)
vendas[2,0:2]
vendas[2,1:2]
vendas[,1:2]
vendas[1,12:2]
vendas[1,2:2]
vendas[1,0:2]
vendas[1:12,0:2]
vendas[1:12,]
vendas[12:24,]
vendas[13:25,]
vendas[13:24,]
vendas[1:12,]
vendas[25:36,]
vendas[37:48,]
ano2010 <- vendas[1:12,]
ano2011 <- vendas[13:24,]
ano2012 <- vendas[25:36,]
ano2013 <- vendas[37:48,]
dados = list(ano2010, ano2011, ano2012, ano2013)
friedman.test(dados)
ano2010 <- vendas[1:12,]
ano2011 <- vendas[13:24,]
ano2012 <- vendas[25:36,]
ano2013 <- vendas[37:48,]
dados = list(ano2010, ano2011, ano2012, ano2013)
friedman.test(groups=dados)
ano2010 <- vendas[1:12,]
ano2011 <- vendas[13:24,]
ano2012 <- vendas[25:36,]
ano2013 <- vendas[37:48,]
dados = list(ano2010, ano2011, ano2012, ano2013)
friedman.test(y = venda,  groups=dados)
ano2010 <- vendas[1:12,]
ano2011 <- vendas[13:24,]
ano2012 <- vendas[25:36,]
ano2013 <- vendas[37:48,]
dados = list(ano2010, ano2011, ano2012, ano2013)
kruskal.test(dados)
install.packages("PCMCR")
kruskal.test(venda ~ data, data = vendas)
kruskal.test(venda ~ data, data = vendas)
library(forecast)
library(ggplot2)
library(stringi)
#Leitura do Arquivo vendas.txt
vendas = read.table('serieVendas.csv', header=TRUE, sep=";")
vendas$venda<- as.numeric(vendas$venda)
#Serie Temporal
serieTemporal <- ts(vendas$venda, start=c(2010, 1), end=c(2016, 12), frequency=12)
#Teste Estacionariedade
#p-value < 0.05 = serie é estacionária
Box.test(serieTemporal, lag=20, type="Ljung-Box")
#Teste Sazionalidade
kruskal.test(venda ~ data, data = vendas)
#Centralizar Titulo
theme_update(plot.title = element_text(hjust = 0.5))
ggplot() + ggtitle()
#Auto Plot - Serie Temporal
titleSerieTemporal <- stri_encode("Series Temporais - Vendas de Produtos", "", "UTF-8")
autoplot(serieTemporal, main = titleSerieTemporal, xlab="Tempo", ylab="Vendas")
#Ajuste - Modelo ARIMA
fitArima <- auto.arima(serieTemporal)
#Ajuste - Modelo Exponencial
fitExponencial <- ets(serieTemporal)
#Ajuste - Modelo TBATS
fitTBats <- tbats(serieTemporal)
fitTBats$seasonal.periods
fitExponencial$components
install.packages("seasonal")
seasonal <- !is.null(fitTBats$seasonal)
seasonal <- !is.null(fitTBats$seasonal)
seasonal
fitArima <- auto.arima(serieTemporal)
#Ajuste - Modelo Exponencial
fitExponencial <- ets(serieTemporal)
#Ajuste - Modelo TBATS
fitTBats <- tbats(serieTemporal)
#Ajuste - Modelo BATS
fitBats <- bats(serieTemporal)
fitArima <- auto.sarima(serieTemporal)
#Teste Sazionalidade
seasonal <- !is.null(fitArima$seasonal)
seasonal
fitArima$seasonal
fitExponencial <- ets(serieTemporal, model="ZZZ", damped = TRUE, ic="aic")
fitExponencial$aic
accuracy(fitExponencial)
exponencial.acc <-accuracy(fitExponencial)
arima.acc <-accuracy(fitArima)
tbats.acc <-accuracy(fitTBats)
neural.acc <- accuracy(fitNeural)
bats.acc <- accuracy(fitBats)
dataSetMAPE <- c(Neural=neural.acc[,'MAPE'],
ARIMA=arima.acc[,'MAPE'],
TBATS=tbats.acc[,'MAPE'],
BATS=bats.acc[,'MAPE'],
Exponencial=exponencial.acc[,'MAPE'])
fitExponencial <- ets(serieTemporal)
accuracy(fitExponencial)
fitArima
fitArima <- Arima(serieTemporal,order=c(1,1,1),
seasonal=list(order=c(2,0,0),period=12),lambda=0)
fitArima
accuracy(fitArima)
fitArima <- Arima(serieTemporal,order=c(1,1,1),
seasonal=list(order=c(2,1,0),period=12),lambda=0)
accuracy(fitArima)
fitArima <- Arima(serieTemporal,order=c(0,1,1),
seasonal=list(order=c(2,1,0),period=12),lambda=0)
accuracy(fitArima)
fitArima <- Arima(serieTemporal,order=c(0,2,1),
seasonal=list(order=c(2,1,0),period=12),lambda=0)
accuracy(fitArima)
fitArima <- Arima(serieTemporal,order=c(0,0,1),
seasonal=list(order=c(2,1,0),period=12),lambda=0)
accuracy(fitArima)
fitArima <- Arima(serieTemporal,order=c(0,1,1),
seasonal=list(order=c(1,1,0),period=12),lambda=0)
accuracy(fitArima)
fitArima <- Arima(serieTemporal,order=c(0,1,1),
seasonal=list(order=c(2,2,0),period=12),lambda=0)
accuracy(fitArima)
fitArima <- Arima(serieTemporal,order=c(0,1,1),
seasonal=list(order=c(2,2,1),period=12),lambda=0)
accuracy(fitArima)
fitArima <- Arima(serieTemporal,order=c(0,1,1),
seasonal=list(order=c(2,1,0),period=12),lambda=0)
accuracy(fitArima)
fitArima <- Arima(serieTemporal,order=c(0,1,1),
seasonal=list(order=c(2,1,0),period=12),lambda=0)
accuracy(fitArima)
fitArima <- Arima(serieTemporal,order=c(0,1,1),
seasonal=list(order=c(2,1,0),period=12),lambda=0)
accuracy(fitArima)
fitArima <- Arima(serieTemporal,order=c(1,1,1),
seasonal=list(order=c(2,1,0),period=12),lambda=0)
accuracy(fitArima)
fitArima <- auto.arima(serieTemporal)
seasonal(serieTemporal)
library(forecast)
library(ggplot2)
library(stringi)
#Leitura do Arquivo vendas.txt
vendas = read.table('serieVendas.csv', header=TRUE, sep=";")
vendas$venda<- as.numeric(vendas$venda)
#Serie Temporal
serieTemporal <- ts(vendas$venda, start=c(2010, 1), end=c(2016, 12), frequency=12)
seasonal(serieTemporal)
forecast::seasadj(serieTemporal)
forecast::seasadj(serieTemporal)
forecast::seasadj(fitExponencial)
ndiffs(serieTemporal)
diff(serieTemporal)
plot(diff(serieTemporal))
library(forecast)
library(ggplot2)
library(stringi)
#Leitura do Arquivo vendas.txt
vendas = read.table('serieVendas.csv', header=TRUE, sep=";")
vendas$venda<- as.numeric(vendas$venda)
#Serie Temporal
serieTemporal <- ts(vendas$venda, start=c(2010, 1), end=c(2016, 12), frequency=12)
#Teste Estacionariedade
#p-value < 0.05 = serie é estacionária
Box.test(serieTemporal, lag=20, type="Ljung-Box")
#Centralizar Titulo
theme_update(plot.title = element_text(hjust = 0.5))
ggplot() + ggtitle()
#Auto Plot - Serie Temporal
titleSerieTemporal <- stri_encode("Series Temporais - Vendas de Produtos", "", "UTF-8")
autoplot(serieTemporal, main = titleSerieTemporal, xlab="Tempo", ylab="Vendas")
#Ajuste - Modelo ARIMA
fitArima <- auto.arima(serieTemporal)
#Ajuste - Modelo Exponencial
fitExponencial <- ets(serieTemporal)
#Ajuste - Modelo TBATS
fitTBats <- tbats(serieTemporal)
#Ajuste - Modelo BATS
fitBats <- bats(serieTemporal)
#Ajuste - Modelo Neural Network
lambda = BoxCox.lambda(serieTemporal)
fitNeural <- nnetar(serieTemporal,repeats=1000,lambda=lambda)
#AIC
fitExponencial$aic
fitArima$aic
fitTBats$AIC
fitBats$AIC
#Verificar Sazionalidade
seasonalExponencial <- !is.null(fitExponencial$seasonal)
seasonalExponencial
seasonalArima <- !is.null(fitArima$seasonal)
seasonalArima
seasonalTBats <- !is.null(fitTBats$seasonal)
seasonalTBats
seasonalBats <- !is.null(fitBats$seasonal)
seasonalBats
#Teste do Modelo - AIC
barplot(c(ETS=fitExponencial$aic, ARIMA=fitArima$aic, TBATS=fitTBats$AIC, BATS=fitBats$AIC),
col="light blue",
ylab="AIC")
# Precisao dos Modelos
exponencial.acc <-accuracy(fitExponencial)
arima.acc <-accuracy(fitArima)
tbats.acc <-accuracy(fitTBats)
neural.acc <- accuracy(fitNeural)
bats.acc <- accuracy(fitBats)
#Erro Percentual Absoluto Médio (MAPE)
dataSetMAPE <- c(Neural=neural.acc[,'MAPE'],
ARIMA=arima.acc[,'MAPE'],
TBATS=tbats.acc[,'MAPE'],
BATS=bats.acc[,'MAPE'],
Exponencial=exponencial.acc[,'MAPE'])
dataSetMAPE
#Erro percentual Absoluto Médio
barplot(dataSetMAPE,
main = "Erro Percentual Absoluto Médio (MAPE)",
col="light blue",
ylab="MAPE")
# Previsao do 1 Semestre de 2017
forecast(fitArima, 6)
forecast(fitNNetar, 6)
forecast(fitTBats, 6)
#Plot
titleForecast <- stri_encode("Previsao de Vendas de Produtos", "", "UTF-8")
autoplot(forecast(fitArima, 6), main = titleForecast, xlab="Tempo", ylab="Vendas")
#Plot
titleForecast <- stri_encode("Previsao de Vendas de Produtos", "", "UTF-8")
autoplot(forecast(fitTBats, 6), main = titleForecast, xlab="Tempo", ylab="Vendas")
forecast(fitTBats, 6)
library(forecast)
library(ggplot2)
library(stringi)
#Leitura do Arquivo vendas.txt
vendas = read.table('serieVendas.csv', header=TRUE, sep=";")
vendas$venda<- as.numeric(vendas$venda)
#Serie Temporal
serieTemporal <- ts(vendas$venda, start=c(2010, 1), end=c(2015, 12), frequency=12)
#Teste Estacionariedade
#p-value < 0.05 = serie é estacionária
Box.test(serieTemporal, lag=20, type="Ljung-Box")
#Centralizar Titulo
theme_update(plot.title = element_text(hjust = 0.5))
ggplot() + ggtitle()
#Auto Plot - Serie Temporal
titleSerieTemporal <- stri_encode("Series Temporais - Vendas de Produtos", "", "UTF-8")
autoplot(serieTemporal, main = titleSerieTemporal, xlab="Tempo", ylab="Vendas")
#Ajuste - Modelo ARIMA
fitArima <- auto.arima(serieTemporal)
#Ajuste - Modelo Exponencial
fitExponencial <- ets(serieTemporal)
#Ajuste - Modelo TBATS
fitTBats <- tbats(serieTemporal)
#Ajuste - Modelo BATS
fitBats <- bats(serieTemporal)
#Ajuste - Modelo Neural Network
lambda = BoxCox.lambda(serieTemporal)
fitNeural <- nnetar(serieTemporal,repeats=1000,lambda=lambda)
#AIC
fitExponencial$aic
fitArima$aic
fitTBats$AIC
fitBats$AIC
#Verificar Sazionalidade
seasonalExponencial <- !is.null(fitExponencial$seasonal)
seasonalExponencial
seasonalArima <- !is.null(fitArima$seasonal)
seasonalArima
seasonalTBats <- !is.null(fitTBats$seasonal)
seasonalTBats
seasonalBats <- !is.null(fitBats$seasonal)
seasonalBats
#Teste do Modelo - AIC
barplot(c(ETS=fitExponencial$aic, ARIMA=fitArima$aic, TBATS=fitTBats$AIC, BATS=fitBats$AIC),
col="light blue",
ylab="AIC")
# Precisao dos Modelos
exponencial.acc <-accuracy(fitExponencial)
arima.acc <-accuracy(fitArima)
tbats.acc <-accuracy(fitTBats)
neural.acc <- accuracy(fitNeural)
bats.acc <- accuracy(fitBats)
#Erro Percentual Absoluto Médio (MAPE)
dataSetMAPE <- c(Neural=neural.acc[,'MAPE'],
ARIMA=arima.acc[,'MAPE'],
TBATS=tbats.acc[,'MAPE'],
BATS=bats.acc[,'MAPE'],
Exponencial=exponencial.acc[,'MAPE'])
dataSetMAPE
#Erro percentual Absoluto Médio
barplot(dataSetMAPE,
main = "Erro Percentual Absoluto Médio (MAPE)",
col="light blue",
ylab="MAPE")
# Previsao do 1 Semestre de 2017
forecast(fitArima, 6)
forecast(fitNNetar, 6)
forecast(fitTBats, 6)
library(forecast)
library(ggplot2)
library(stringi)
#Leitura do Arquivo vendas.txt
vendas = read.table('serieVendas.csv', header=TRUE, sep=";")
vendas$venda<- as.numeric(vendas$venda)
#Serie Temporal
serieTemporal <- ts(vendas$venda, start=c(2010, 1), end=c(2016, 12), frequency=12)
#Teste Estacionariedade
#p-value < 0.05 = serie é estacionária
Box.test(serieTemporal, lag=20, type="Ljung-Box")
#Centralizar Titulo
theme_update(plot.title = element_text(hjust = 0.5))
ggplot() + ggtitle()
#Auto Plot - Serie Temporal
titleSerieTemporal <- stri_encode("Series Temporais - Vendas de Produtos", "", "UTF-8")
autoplot(serieTemporal, main = titleSerieTemporal, xlab="Tempo", ylab="Vendas")
#Ajuste - Modelo ARIMA
fitArima <- auto.arima(serieTemporal)
#Ajuste - Modelo Exponencial
fitExponencial <- ets(serieTemporal)
#Ajuste - Modelo TBATS
fitTBats <- tbats(serieTemporal)
#Ajuste - Modelo BATS
fitBats <- bats(serieTemporal)
#Ajuste - Modelo Neural Network
lambda = BoxCox.lambda(serieTemporal)
fitNeural <- nnetar(serieTemporal,repeats=1000,lambda=lambda)
#AIC
fitExponencial$aic
fitArima$aic
fitTBats$AIC
fitBats$AIC
#Verificar Sazionalidade
seasonalExponencial <- !is.null(fitExponencial$seasonal)
seasonalExponencial
seasonalArima <- !is.null(fitArima$seasonal)
seasonalArima
seasonalTBats <- !is.null(fitTBats$seasonal)
seasonalTBats
seasonalBats <- !is.null(fitBats$seasonal)
seasonalBats
#Teste do Modelo - AIC
barplot(c(ETS=fitExponencial$aic, ARIMA=fitArima$aic, TBATS=fitTBats$AIC, BATS=fitBats$AIC),
col="light blue",
ylab="AIC")
# Precisao dos Modelos
exponencial.acc <-accuracy(fitExponencial)
arima.acc <-accuracy(fitArima)
tbats.acc <-accuracy(fitTBats)
neural.acc <- accuracy(fitNeural)
bats.acc <- accuracy(fitBats)
#Erro Percentual Absoluto Médio (MAPE)
dataSetMAPE <- c(Neural=neural.acc[,'MAPE'],
ARIMA=arima.acc[,'MAPE'],
TBATS=tbats.acc[,'MAPE'],
BATS=bats.acc[,'MAPE'],
Exponencial=exponencial.acc[,'MAPE'])
dataSetMAPE
#Erro percentual Absoluto Médio
barplot(dataSetMAPE,
main = "Erro Percentual Absoluto Médio (MAPE)",
col="light blue",
ylab="MAPE")
# Previsao do 1 Semestre de 2017
forecast(fitArima, 6)
forecast(fitNNetar, 6)
forecast(fitTBats, 6)
dataSetMAPE
forecast(fitExponencial, 6)
forecast(fitNNetar, 6)
lambda = BoxCox.lambda(serieTemporal)
fitNeural <- nnetar(serieTemporal,repeats=1000,lambda=lambda)
forecast(fitNNetar, 6)
forecast(fitNeural, 6)
forecast(fitNeural, 6)
