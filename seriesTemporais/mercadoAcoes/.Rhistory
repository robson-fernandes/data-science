k = 1
momento1 = desvioPadrao^k / variancia^k
library(e1071)
c = c(1,3,5,6,8,10,15)
desvioPadrao = sd(c)
variancia  = var(c)
k = 1
momento1 = desvioPadrao^k / variancia^k
library(e1071)
c = c(1,3,5,6,8,10,15)
desvioPadrao = sd(c)
variancia  = var(c)
k = 1
momento1 = desvioPadrao^k / variancia^k
momento1
moment(c)
library(e1071)
c = c(1,3,5,6,8,10,15)
desvioPadrao = sd(c)
variancia  = var(c)
k = 1
momento1 = desvioPadrao^k / variancia^k
momento1
moment(c)
moment(c, order=1, center=TRUE)
k = 1
momento1 = desvioPadrao^k / variancia^k
momento1
moment(c, order=1, center=TRUE)
moment(c, order=1)
moment(c, order=2)
k = 2
momento1 = desvioPadrao^k / variancia^k
momento1
mean(c)
moment(c, order=1)
desvioPadrao = sd(c)
variancia  = var(c)
moment(c, order=1)
moment(c, order=4)
kurtosis(c)
skewness(c)
moment(c, order=2)
moment(c, order=1)
moment(c, order=2)
moment(c)
moment(c)
moment(c)
moment(c, order=1,center = TRUE)
moment(c, order=2,center = TRUE)
moment(c, order=2,center = TRUE)
variancia  = var(c)
variancia  = var(c)
variancia
moment(c, order=2,center = TRUE)
moment(c, order=3,center = TRUE)
moment(c, order=1,center = TRUE)
-12.428 + 12.429
-12.428 + 12.429 / 6
(-12.428 + 12.429) / 6
moment(c, order=1,center = TRUE)
(-12.428 + 12.429) / 6
moment(c, order=2,center = TRUE)
k = 2
momento1 =  variancia^k / desvioPadrao^k
momento1
k = 1
momento1 =  variancia^k / desvioPadrao^k
momento1
k = 1
momento1 =  variancia^k / desvioPadrao^k
momento1
k = 2
momento1 =  variancia^k / desvioPadrao^k
momento1
library(bnlearn)
library(Rgraphviz)
vendaProdutosDataSet = read.table('vendaProdutos.csv', header=TRUE, sep=";")
attach(vendaProdutosDataSet)
#Modelo da Rede Bayesiana
dag <- model2network("[codProduto][codGrupoVenda|codProduto][quantidadeIntervalo|codGrupoVenda][vendaIntervalo|quantidadeIntervalo:codGrupoVenda][desDiaSemana|vendaIntervalo]")
plot(dag)
titleForecast <- stri_encode("Times Series Forecast - Google Nasdaq", "", "UTF-8")
autoplot(forecast(fitArima, 6), main = titleForecast, xlab="Time", ylab="Close")
library(forecast)
library(ggplot2)
library(stringi)
library(dplyr)
library(tseries)
#Read File GOOG_NASDAQ.csv
googNasdaq = read.table('GOOG_NASDAQ.csv', header=TRUE, sep=",")
#Conversion Data
googNasdaq$Date<- as.Date(googNasdaq$Date)
googNasdaq$Close<- as.numeric(googNasdaq$Close)
#Filter DataSet
googNasdaq <- googNasdaq %>%
select(Date,Close) %>%
filter(Date >= as.Date("2005-01-01") & Date <= as.Date("2016-12-31"))
googNasdaq <- arrange(googNasdaq,Date)
#Time Series
timeSeries <- ts(googNasdaq$Close, start=c(2005, 1), end=c(2016, 12), frequency=12)
#Time Series Decomposition
timeSeriesComponents <- decompose(timeSeries)
autoplot(timeSeriesComponents)
#Seasonally Adjusting
timeSeriesSeasonallyAdjusted <- timeSeries - timeSeriesComponents$seasonal
autoplot(timeSeriesSeasonallyAdjusted)
# Stationary Test
adf <- adf.test(timeSeries)
adf
#Centralizar Titulo
theme_update(plot.title = element_text(hjust = 0.5))
ggplot() + ggtitle()
#Auto Plot - Serie Temporal
timeSeriesTitle <- stri_encode("Times Series - Google Nasdaq", "", "UTF-8")
autoplot(timeSeries, main = timeSeriesTitle, xlab="Time", ylab="Close")
#Fit - ARIMA Model
fitArima <- auto.arima(timeSeries)
fitArima
#Fit - Exponencial Model
fitExponencial <- ets(timeSeries)
#Fit - TBATS Model
fitTBats <- tbats(timeSeries)
#AIC Test
fitExponencial$aic
fitArima$aic
fitTBats$AIC
#AIC Test - Plot
barplot(c(ETS=fitExponencial$aic, ARIMA=fitArima$aic, TBATS=fitTBats$AIC),
col="light blue",
ylab="AIC")
# Models Accuracy
accuracy(fitExponencial)
accuracy(fitArima)
accuracy(fitTBats)
# Previsao do 1 Semestre de 2017
forecast(fitArima, 6)
#Plot
titleForecast <- stri_encode("Times Series Forecast - Google Nasdaq", "", "UTF-8")
autoplot(forecast(fitArima, 6), main = titleForecast, xlab="Time", ylab="Close")
library(forecast)
library(ggplot2)
library(stringi)
library(dplyr)
library(tseries)
#Read File GOOG_NASDAQ.csv
googNasdaq = read.table('GOOG_NASDAQ.csv', header=TRUE, sep=",")
#Conversion Data
googNasdaq$Date<- as.Date(googNasdaq$Date)
googNasdaq$Close<- as.numeric(googNasdaq$Close)
#Filter DataSet
googNasdaq <- googNasdaq %>%
select(Date,Close) %>%
filter(Date >= as.Date("2005-01-01") & Date <= as.Date("2016-12-31"))
googNasdaq <- arrange(googNasdaq,Date)
#Time Series
timeSeries <- ts(googNasdaq$Close, start=c(2005, 1), end=c(2016, 12), frequency=12)
library(forecast)
library(ggplot2)
library(stringi)
library(dplyr)
library(tseries)
#Read File GOOG_NASDAQ.csv
googNasdaq = read.table('GOOG_NASDAQ.csv', header=TRUE, sep=",")
#Conversion Data
googNasdaq$Date<- as.Date(googNasdaq$Date)
googNasdaq$Close<- as.numeric(googNasdaq$Close)
#Filter DataSet
googNasdaq <- googNasdaq %>%
select(Date,Close) %>%
filter(Date >= as.Date("2005-01-01") & Date <= as.Date("2016-12-31"))
googNasdaq <- arrange(googNasdaq,Date)
#Time Series
timeSeries <- ts(googNasdaq$Close, start=c(2005, 1), end=c(2016, 12), frequency=12)
setwd("~/Documents/projetos/data-science/seriesTemporais/mercadoAcoes")
library(forecast)
library(ggplot2)
library(stringi)
library(dplyr)
library(tseries)
#Read File GOOG_NASDAQ.csv
googNasdaq = read.table('GOOG_NASDAQ.csv', header=TRUE, sep=",")
#Conversion Data
googNasdaq$Date<- as.Date(googNasdaq$Date)
googNasdaq$Close<- as.numeric(googNasdaq$Close)
#Filter DataSet
googNasdaq <- googNasdaq %>%
select(Date,Close) %>%
filter(Date >= as.Date("2005-01-01") & Date <= as.Date("2016-12-31"))
googNasdaq <- arrange(googNasdaq,Date)
#Time Series
timeSeries <- ts(googNasdaq$Close, start=c(2005, 1), end=c(2016, 12), frequency=12)
#Time Series Decomposition
timeSeriesComponents <- decompose(timeSeries)
autoplot(timeSeriesComponents)
#Seasonally Adjusting
timeSeriesSeasonallyAdjusted <- timeSeries - timeSeriesComponents$seasonal
autoplot(timeSeriesSeasonallyAdjusted)
# Stationary Test
adf <- adf.test(timeSeries)
adf
#Centralizar Titulo
theme_update(plot.title = element_text(hjust = 0.5))
ggplot() + ggtitle()
#Auto Plot - Serie Temporal
timeSeriesTitle <- stri_encode("Times Series - Google Nasdaq", "", "UTF-8")
autoplot(timeSeries, main = timeSeriesTitle, xlab="Time", ylab="Close")
#Fit - ARIMA Model
fitArima <- auto.arima(timeSeries)
fitArima
#Fit - Exponencial Model
fitExponencial <- ets(timeSeries)
#Fit - TBATS Model
fitTBats <- tbats(timeSeries)
#AIC Test
fitExponencial$aic
fitArima$aic
fitTBats$AIC
#AIC Test - Plot
barplot(c(ETS=fitExponencial$aic, ARIMA=fitArima$aic, TBATS=fitTBats$AIC),
col="light blue",
ylab="AIC")
# Models Accuracy
accuracy(fitExponencial)
accuracy(fitArima)
accuracy(fitTBats)
# Previsao do 1 Semestre de 2017
forecast(fitArima, 6)
#Plot
titleForecast <- stri_encode("Times Series Forecast - Google Nasdaq", "", "UTF-8")
autoplot(forecast(fitArima, 6), main = titleForecast, xlab="Time", ylab="Close")
View(googNasdaq)
titleForecast <- stri_encode("Times Series Forecast - Google Nasdaq", "", "UTF-8")
autoplot(forecast(fitArima, 6), main = titleForecast, xlab="Time", ylab="Close")
library(forecast)
library(ggplot2)
library(stringi)
library(dplyr)
library(tseries)
#Read File GOOG_NASDAQ.csv
googNasdaq = read.table('GOOG_NASDAQ.csv', header=TRUE, sep=",")
#Conversion Data
googNasdaq$Date<- as.Date(googNasdaq$Date)
#googNasdaq$Close<- as.numeric(googNasdaq$Close)
#Filter DataSet
googNasdaq <- googNasdaq %>%
select(Date,Close) %>%
filter(Date >= as.Date("2005-01-01") & Date <= as.Date("2016-12-31"))
googNasdaq <- arrange(googNasdaq,Date)
#Time Series
timeSeries <- ts(googNasdaq$Close, start=c(2005, 1), end=c(2016, 12), frequency=12)
#Time Series Decomposition
timeSeriesComponents <- decompose(timeSeries)
autoplot(timeSeriesComponents)
#Seasonally Adjusting
timeSeriesSeasonallyAdjusted <- timeSeries - timeSeriesComponents$seasonal
autoplot(timeSeriesSeasonallyAdjusted)
# Stationary Test
adf <- adf.test(timeSeries)
adf
#Centralizar Titulo
theme_update(plot.title = element_text(hjust = 0.5))
ggplot() + ggtitle()
#Auto Plot - Serie Temporal
timeSeriesTitle <- stri_encode("Times Series - Google Nasdaq", "", "UTF-8")
autoplot(timeSeries, main = timeSeriesTitle, xlab="Time", ylab="Close")
#Fit - ARIMA Model
fitArima <- auto.arima(timeSeries)
fitArima
#Fit - Exponencial Model
fitExponencial <- ets(timeSeries)
#Fit - TBATS Model
fitTBats <- tbats(timeSeries)
#AIC Test
fitExponencial$aic
fitArima$aic
fitTBats$AIC
#AIC Test - Plot
barplot(c(ETS=fitExponencial$aic, ARIMA=fitArima$aic, TBATS=fitTBats$AIC),
col="light blue",
ylab="AIC")
# Models Accuracy
accuracy(fitExponencial)
accuracy(fitArima)
accuracy(fitTBats)
# Previsao do 1 Semestre de 2017
forecast(fitArima, 6)
#Plot
titleForecast <- stri_encode("Times Series Forecast - Google Nasdaq", "", "UTF-8")
autoplot(forecast(fitArima, 6), main = titleForecast, xlab="Time", ylab="Close")
autoplot(timeSeriesSeasonallyAdjusted)
autoplot(timeSeries, main = timeSeriesTitle, xlab="Time", ylab="Close")
fitArima <- auto.arima(timeSeries)
fitArima$aic
accuracy(fitArima)
forecast(fitArima, 6)
autoplot(forecast(fitArima, 6), main = titleForecast, xlab="Time", ylab="Close")
autoplot(timeSeries, main = timeSeriesTitle, xlab="Time", ylab="Close")
autoplot(forecast(fitArima, 6), main = titleForecast, xlab="Time", ylab="Close")
forecast <- forecast(fitArima, 6)
autoplot(forecast, main = titleForecast, xlab="Time", ylab="Close")
# Previsao do 1 Semestre de 2017
forecast <- forecast(fitArima, 12)
autoplot(forecast, main = titleForecast, xlab="Time", ylab="Close")
forecast <- forecast(fitArima, 6)
forecast <- forecast(fitArima, 6)
forecast
autoplot(forecast, main = titleForecast, xlab="Time", ylab="Close")
plot(forecast, main = titleForecast, xlab="Time", ylab="Close")
autoplot(forecast, main = titleForecast, xlab="Time", ylab="Close")
autoplot(forecast, main = titleForecast, xlab="Time", ylab="Close")
autoplot(forecast, main = titleForecast, xlab="Time", ylab="Close")
autoplot(forecast, main = titleForecast, xlab="Time", ylab="Close")
autoplot(forecast, main = titleForecast, xlab="Time", ylab="Close")
forecast <- forecast(fitArima, 3)
forecast
autoplot(forecast, main = titleForecast, xlab="Time", ylab="Close")
forecast <- forecast(fitArima, 6)
forecast
autoplot(forecast, main = titleForecast, xlab="Time", ylab="Close")
forecast <- forecast(fitArima, 12)
forecast
autoplot(forecast, main = titleForecast, xlab="Time", ylab="Close")
forecast <- forecast(fitArima, 6)
forecast
titleForecast <- stri_encode("Times Series Forecast - Google Nasdaq", "", "UTF-8")
autoplot(forecast, main = titleForecast, xlab="Time", ylab="Close")
library(forecast)
library(ggplot2)
library(stringi)
library(dplyr)
library(tseries)
#Read File GOOG_NASDAQ.csv
googNasdaq = read.table('GOOG_NASDAQ.csv', header=TRUE, sep=",")
#Conversion Data
googNasdaq$Date<- as.Date(googNasdaq$Date)
#googNasdaq$Close<- as.numeric(googNasdaq$Close)
#Filter DataSet
googNasdaq <- googNasdaq %>%
select(Date,Close) %>%
filter(Date >= as.Date("2005-01-01") & Date <= as.Date("2016-12-31"))
googNasdaq <- arrange(googNasdaq,Date)
#Time Series
timeSeries <- ts(googNasdaq$Close, start=c(2005, 1), end=c(2016, 12), frequency=12)
#Time Series Decomposition
timeSeriesComponents <- decompose(timeSeries)
autoplot(timeSeriesComponents)
#Seasonally Adjusting
timeSeriesSeasonallyAdjusted <- timeSeries - timeSeriesComponents$seasonal
autoplot(timeSeriesSeasonallyAdjusted)
# Stationary Test
adf <- adf.test(timeSeries)
adf
#Centralizar Titulo
theme_update(plot.title = element_text(hjust = 0.5))
ggplot() + ggtitle()
#Auto Plot - Serie Temporal
timeSeriesTitle <- stri_encode("Times Series - Google Nasdaq", "", "UTF-8")
autoplot(timeSeries, main = timeSeriesTitle, xlab="Time", ylab="Close")
#Fit - ARIMA Model
fitArima <- auto.arima(timeSeries)
#Fit - Exponencial Model
fitExponencial <- ets(timeSeries)
#Fit - TBATS Model
fitTBats <- tbats(timeSeries)
#AIC Test
fitExponencial$aic
fitArima$aic
fitTBats$AIC
#AIC Test - Plot
barplot(c(ETS=fitExponencial$aic, ARIMA=fitArima$aic, TBATS=fitTBats$AIC),
col="light blue",
ylab="AIC")
# Models Accuracy
accuracy(fitExponencial)
accuracy(fitArima)
accuracy(fitTBats)
# Previsao do 1 Semestre de 2017
forecast <- forecast(fitArima, 6)
forecast
#Plot
titleForecast <- stri_encode("Times Series Forecast - Google Nasdaq", "", "UTF-8")
autoplot(forecast, main = titleForecast, xlab="Time", ylab="Close")
d.forecast <- forecast(fitArima, level = c(95), h = 50)
autoplot(d.forecast)
d.forecast <- forecast(fitArima, 6, level = c(95), h = 50)
autoplot(d.forecast)
gglagplot(fitArima, lags = 4)
gglagplot(timeSeries, lags = 4)
autoplot(acf(timeSeries, plot = FALSE))
d.forecast <- forecast(fitArima, 6, level = c(95), h = 50)
autoplot(d.forecast)
d.forecast <- forecast(fitArima, 6)
autoplot(d.forecast)
d.forecast <- forecast(fitArima, 6)
autoplot(d.forecast, ts.colour = 'firebrick1', predict.colour = 'red',
predict.linetype = 'dashed', conf.int = FALSE)
library(forecast)
library(ggplot2)
library(stringi)
library(dplyr)
library(tseries)
#Read File GOOG_NASDAQ.csv
googNasdaq = read.table('GOOG_NASDAQ.csv', header=TRUE, sep=",")
#Conversion Data
googNasdaq$Date<- as.Date(googNasdaq$Date)
#googNasdaq$Close<- as.numeric(googNasdaq$Close)
#Filter DataSet
googNasdaq <- googNasdaq %>%
select(Date,Close) %>%
filter(Date >= as.Date("2005-01-01") & Date <= as.Date("2016-12-31"))
googNasdaq <- arrange(googNasdaq,Date)
#Time Series
timeSeries <- ts(googNasdaq$Close, start=c(2005, 1), end=c(2016, 12), frequency=12)
#Time Series Decomposition
#timeSeriesComponents <- decompose(timeSeries)
#autoplot(timeSeriesComponents)
#Seasonally Adjusting
#timeSeriesSeasonallyAdjusted <- timeSeries - timeSeriesComponents$seasonal
#autoplot(timeSeriesSeasonallyAdjusted)
# Stationary Test
#adf <- adf.test(timeSeries)
#adf
#Centralizar Titulo
theme_update(plot.title = element_text(hjust = 0.5))
ggplot() + ggtitle()
#Auto Plot - Serie Temporal
timeSeriesTitle <- stri_encode("Times Series - Google Nasdaq", "", "UTF-8")
autoplot(timeSeries, main = timeSeriesTitle, xlab="Time", ylab="Close")
#Fit - ARIMA Model
fitArima <- auto.arima(timeSeries)
#Fit - Exponencial Model
fitExponencial <- ets(timeSeries)
#Fit - TBATS Model
fitTBats <- tbats(timeSeries)
#AIC Test
fitExponencial$aic
fitArima$aic
fitTBats$AIC
#AIC Test - Plot
barplot(c(ETS=fitExponencial$aic, ARIMA=fitArima$aic, TBATS=fitTBats$AIC),
col="light blue",
ylab="AIC")
# Models Accuracy
accuracy(fitExponencial)
accuracy(fitArima)
accuracy(fitTBats)
# Previsao do 1 Semestre de 2017
forecast <- forecast(fitArima, 6)
forecast
#Plot
titleForecast <- stri_encode("Times Series Forecast - Google Nasdaq", "", "UTF-8")
autoplot(forecast, main = titleForecast, xlab="Time", ylab="Close")
autoplot(forecast, main = titleForecast, xlab="Time", ylab="Close")
plot(forecast, main = titleForecast, xlab="Time", ylab="Close")
titleForecast <- stri_encode("Times Series Forecast - Google Nasdaq", "", "UTF-8")
ggplot(forecast, main = titleForecast, xlab="Time", ylab="Close")
autoplot(forecast, main = titleForecast, xlab="Time", ylab="Close")
forecast
forecast$x
autoplot(forecast, main = titleForecast, xlab="Time", ylab="Close", divideTime=5)
autoplot(forecast, main = titleForecast, xlab="Time", ylab="Close",
CI=TRUE, pval=TRUE)
autoplot(forecast, main = titleForecast, xlab="Time", ylab="Close",
CI=TRUE, pval=TRUE)
forecast <- forecast(fitArima, 7)
forecast$x
autoplot(forecast, main = titleForecast, xlab="Time", ylab="Close",
CI=TRUE, pval=TRUE)
forecast <- forecast(fitArima, 8)
forecast$x
autoplot(forecast, main = titleForecast, xlab="Time", ylab="Close",
CI=TRUE, pval=TRUE)
forecast <- forecast(fitArima, 6)
forecast$x
autoplot(forecast, main = titleForecast, xlab="Time", ylab="Close",
CI=TRUE, pval=TRUE)
g<-ggplot(forecast, aes(Date, Close))+geom_point(color="firebrick")
g
g<-ggplot(timeSeries, aes(Date, Close))+geom_point(color="firebrick")
g
g<-ggplot(googNasdaq, aes(Date, Close))+geom_point(color="firebrick")
g
forecast$xname
g<-ggplot(forecast)+geom_point(color="firebrick")
g<-ggplot(forecast)+geom_point(color="firebrick")
g<-ggplot(forecast)+geom_point(color="firebrick")
g
autoplot(forecast, main = titleForecast, xlab="Time", ylab="Close")
pd <- funggcast(timeSeries, forecast) # extract the data for ggplot using function funggcast()
ggplot(data = pd, aes(x = date, y = observed)) + geom_line(color = "red") + geom_line(aes(y = fitted), color = "blue") + geom_line(aes(y = forecast)) + geom_ribbon(aes(ymin = lo95, ymax = hi95), alpha = .25) + scale_x_date(name = "Time in Decades") + scale_y_continuous(name = "GDP per capita (current US$)") + theme(axis.text.x = element_text(size = 10), legend.justification=c(0,1), legend.position=c(0,1)) + ggtitle("Arima(0,1,1) Fit and Forecast of GDP per capita for Brazil (1960-2013)") + scale_color_manual(values = c("Blue", "Red"), breaks = c("Fitted", "Data", "Forecast")) + ggsave((filename = "gdp_forecast_ggplot.pdf"), width=330, height=180, units=c("mm"), dpi = 300, limitsize = TRUE)
library(forecast)
library(ggplot2)
library(stringi)
library(dplyr)
library(tseries)
pd <- funggcast(timeSeries, forecast) # extract the data for ggplot using function funggcast()
ggplot(data = pd, aes(x = date, y = observed)) + geom_line(color = "red") + geom_line(aes(y = fitted), color = "blue") + geom_line(aes(y = forecast)) + geom_ribbon(aes(ymin = lo95, ymax = hi95), alpha = .25) + scale_x_date(name = "Time in Decades") + scale_y_continuous(name = "GDP per capita (current US$)") + theme(axis.text.x = element_text(size = 10), legend.justification=c(0,1), legend.position=c(0,1)) + ggtitle("Arima(0,1,1) Fit and Forecast of GDP per capita for Brazil (1960-2013)") + scale_color_manual(values = c("Blue", "Red"), breaks = c("Fitted", "Data", "Forecast")) + ggsave((filename = "gdp_forecast_ggplot.pdf"), width=330, height=180, units=c("mm"), dpi = 300, limitsize = TRUE)
pd <- funggcast(timeSeries, forecast) # extract the data for ggplot using function funggcast()
ggplot(data = pd, aes(x = date, y = observed)) + geom_line(color = "red") + geom_line(aes(y = fitted), color = "blue") + geom_line(aes(y = forecast)) + geom_ribbon(aes(ymin = lo95, ymax = hi95), alpha = .25) + scale_x_date(name = "Time in Decades") + scale_y_continuous(name = "GDP per capita (current US$)") + theme(axis.text.x = element_text(size = 10), legend.justification=c(0,1), legend.position=c(0,1)) + ggtitle("Arima(0,1,1) Fit and Forecast of GDP per capita for Brazil (1960-2013)") + scale_color_manual(values = c("Blue", "Red"), breaks = c("Fitted", "Data", "Forecast")) + ggsave((filename = "gdp_forecast_ggplot.pdf"), width=330, height=180, units=c("mm"), dpi = 300, limitsize = TRUE)
# Previsao do 1 Semestre de 2017
forecast <- forecast(fitArima, 6)
#Plot
titleForecast <- stri_encode("Times Series Forecast - Google Nasdaq", "", "UTF-8")
autoplot(forecast, main = titleForecast, xlab="Time", ylab="Close")
titleForecast <- stri_encode("Times Series Forecast - Google Nasdaq", "", "UTF-8")
plot(forecast, main = titleForecast, xlab="Time", ylab="Close")
forecast <- forecast(fitExponencial, 6)
forecast <- forecast(fitExponencial, 6)
autoplot(forecast, main = titleForecast, xlab="Time", ylab="Close")
forecast <- forecast(fitArima, 6)
autoplot(forecast, main = titleForecast, xlab="Time", ylab="Close")
