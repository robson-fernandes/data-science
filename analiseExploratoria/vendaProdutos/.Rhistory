#----------------------------------------
# ANALISE DO MODELO DE REGRESSAO
#----------------------------------------
predict(modelo)  # valores preditos pela equacao de regressao
residuals(modelo) # valores residuos
#Verificando Normalidade dos residuos
shapiro.test(residuals(modelo))
#----------------------------------------
#ANALISE DE RESIDUOS
#----------------------------------------
plot(fitted(modelo),residuals(modelo),xlab="Valores Ajustados",ylab="Residuos")
abline(h=0)
plot(tempo,residuals(modelo),xlab="tempo",ylab="Residuos")
abline(h=0)
qqnorm(residuals(modelo), ylab="Residuos")
qqline(residuals(modelo))
#----------------------------------------
#----------------------------------------
# GRAFICO DE REGRESAO
#----------------------------------------
plot(tempo ~ oxigenio)
abline(modelo, col=2, lty=2, lwd=2)
legend("top", legend=c("valores observados", "valores ajustados"), lty=c(NA,2), col=c(1,2), lwd=1:2, bty="n", pch=c(1,NA))
dataOxigenio = read.table('/Users/robsonfernandes/Desktop/regressao/oxigenio.txt',header=T)
attach(dataOxigenio)
modelo = lm(tempo ~ oxigenio)
modelo
#----------------------------------------
# Robson Fernandes da Silva <robson.fernandes@usp.br>
# N. USP - 10107495
# Trabalho - Regress√£o Linear
#----------------------------------------
dataOxigenio = read.table('/Users/robsonfernandes/Desktop/regressao/oxigenio.txt',header=T)
attach(dataOxigenio)
#----------------------------------------
# ESTATISTICA DESCRITIVA
#----------------------------------------
summary(dataOxigenio)
var(dataOxigenio$tempo)
var(dataOxigenio$oxigenio)
sd(dataOxigenio$tempo)
sd(dataOxigenio$oxigenio)
#Teste de correlao - Coeficiente de correlacao de Pearson
cor.test(dataOxigenio$tempo,dataOxigenio$oxigenio)
#----------------------------------------
# DIAGRAMA DE DISPERSAO
#----------------------------------------
plot(tempo,oxigenio,xlab="Tempo",ylab="Oxigenio")
points(mean(tempo), mean(oxigenio),col="red",lwd=5,lty=9)
#----------------------------------------
# AJUSTE NO MODELO
#----------------------------------------
#Modelo Ajustado
modelo = lm(tempo ~ oxigenio)
modelo
summary(modelo)
#----------------------------------------
# ANALISE DO MODELO DE REGRESSAO
#----------------------------------------
predict(modelo)  # valores preditos pela equacao de regressao
residuals(modelo) # valores residuos
#Verificando Normalidade dos residuos
shapiro.test(residuals(modelo))
#----------------------------------------
#ANALISE DE RESIDUOS
#----------------------------------------
plot(fitted(modelo),residuals(modelo),xlab="Valores Ajustados",ylab="Residuos")
abline(h=0)
plot(tempo,residuals(modelo),xlab="tempo",ylab="Residuos")
abline(h=0)
qqnorm(residuals(modelo), ylab="Residuos")
qqline(residuals(modelo))
#----------------------------------------
#----------------------------------------
# GRAFICO DE REGRESAO
#----------------------------------------
plot(tempo ~ oxigenio)
abline(modelo, col=2, lty=2, lwd=2)
legend("top", legend=c("valores observados", "valores ajustados"), lty=c(NA,2), col=c(1,2), lwd=1:2, bty="n", pch=c(1,NA))
install.packages("plotly")
library(plotly)
p <- plot_ly(x = ~rnorm(50), type = "histogram")
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = plotly_POST(p, filename="histogram/1")
chart_link
library(plotly)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = ~carat, y = ~price, color = ~carat,
size = ~carat, text = ~paste("Clarity: ", clarity))
alligator = data.frame(
lnLength = c(3.87, 3.61, 4.33, 3.43, 3.81, 3.83, 3.46, 3.76,
3.50, 3.58, 4.19, 3.78, 3.71, 3.73, 3.78),
lnWeight = c(4.87, 3.93, 6.46, 3.33, 4.38, 4.70, 3.50, 4.50,
3.58, 3.64, 5.90, 4.43, 4.38, 4.42, 4.25)
)
xyplot(lnWeight ~ lnLength, data = alligator,
xlab = "Snout vent length (inches) on log scale",
ylab = "Weight (pounds) on log scale",
main = "Alligators in Central Florida"
)
library(plotly)
alligator = data.frame(
lnLength = c(3.87, 3.61, 4.33, 3.43, 3.81, 3.83, 3.46, 3.76,
3.50, 3.58, 4.19, 3.78, 3.71, 3.73, 3.78),
lnWeight = c(4.87, 3.93, 6.46, 3.33, 4.38, 4.70, 3.50, 4.50,
3.58, 3.64, 5.90, 4.43, 4.38, 4.42, 4.25)
)
plot_ly(lnWeight ~ lnLength, data = alligator,
xlab = "Snout vent length (inches) on log scale",
ylab = "Weight (pounds) on log scale",
main = "Alligators in Central Florida"
)
library(plotly)
alligator = data.frame(
lnLength = c(3.87, 3.61, 4.33, 3.43, 3.81, 3.83, 3.46, 3.76,
3.50, 3.58, 4.19, 3.78, 3.71, 3.73, 3.78),
lnWeight = c(4.87, 3.93, 6.46, 3.33, 4.38, 4.70, 3.50, 4.50,
3.58, 3.64, 5.90, 4.43, 4.38, 4.42, 4.25)
)
plot_ly(lnWeight ~ lnLength, data = alligator,
xlab = "Snout vent length (inches) on log scale",
ylab = "Weight (pounds) on log scale",
main = "Alligators in Central Florida"
)
library(plotly)
alligator = data.frame(
lnLength = c(3.87, 3.61, 4.33, 3.43, 3.81, 3.83, 3.46, 3.76,
3.50, 3.58, 4.19, 3.78, 3.71, 3.73, 3.78),
lnWeight = c(4.87, 3.93, 6.46, 3.33, 4.38, 4.70, 3.50, 4.50,
3.58, 3.64, 5.90, 4.43, 4.38, 4.42, 4.25)
)
p <- plot_ly(data = alligator, x = ~lnWeight, y = ~lnLength)
chart_link = plotly_POST(p, filename="scatter/basic")
chart_link
library(plotly)
alligator = data.frame(
lnLength = c(3.87, 3.61, 4.33, 3.43, 3.81, 3.83, 3.46, 3.76,
3.50, 3.58, 4.19, 3.78, 3.71, 3.73, 3.78),
lnWeight = c(4.87, 3.93, 6.46, 3.33, 4.38, 4.70, 3.50, 4.50,
3.58, 3.64, 5.90, 4.43, 4.38, 4.42, 4.25)
)
p <- plot_ly(data = alligator, x = ~lnWeight, y = ~lnLength)
chart_link = plotly_POST(p, filename="scatter/basic")
chart_link
library(plotly)
alligator = data.frame(
lnLength = c(3.87, 3.61, 4.33, 3.43, 3.81, 3.83, 3.46, 3.76,
3.50, 3.58, 4.19, 3.78, 3.71, 3.73, 3.78),
lnWeight = c(4.87, 3.93, 6.46, 3.33, 4.38, 4.70, 3.50, 4.50,
3.58, 3.64, 5.90, 4.43, 4.38, 4.42, 4.25)
)
p <- plot_ly(data = alligator, x = ~lnWeight, y = ~lnLength)
chart_link = plotly_POST(p, filename="scatter/basic")
library(plotly)
alligator = data.frame(
lnLength = c(3.87, 3.61, 4.33, 3.43, 3.81, 3.83, 3.46, 3.76,
3.50, 3.58, 4.19, 3.78, 3.71, 3.73, 3.78),
lnWeight = c(4.87, 3.93, 6.46, 3.33, 4.38, 4.70, 3.50, 4.50,
3.58, 3.64, 5.90, 4.43, 4.38, 4.42, 4.25)
)
p <- plot_ly(data = alligator, x = ~lnWeight, y = ~lnLength)
chart_link = plotly_POST(p)
chart_link
library(plotly)
p <- plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length, color = ~Species)
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = plotly_POST(p, filename="scatter/color")
chart_link
Y1<-plnorm(tempo, meanlog = betas%*%covariaveis, sdlog = 1.24, log = FALSE)
##Tempo de interesse
tempo<-seq(0,200,1)
covariaveis1<-c(1,0,0,0,1,0,1,0)
betas<-c(2.2619,2.2783,1.8414,1.5244,0.2614,-0.0836,0.1251,-0.0197)
Y1<-plnorm(tempo, meanlog = betas%*%covariaveis, sdlog = 1.24, log = FALSE)
##Tempo de interesse
tempo<-seq(0,200,1)
covariaveis1<-c(1,0,0,0,1,0,1,0)
betas<-c(2.2619,2.2783,1.8414,1.5244,0.2614,-0.0836,0.1251,-0.0197)
Y1<-plnorm(tempo, meanlog = betas%*%covariaveis, sdlog = 1.24, log = FALSE)
Y1
##Tempo de interesse
tempo<-seq(0,200,1)
##Tempo de interesse
tempo<-seq(0,200,1)
covariaveis1<-c(1,0,0,0,1,0,1,0)
betas<-c(2.2619,2.2783,1.8414,1.5244,0.2614,-0.0836,0.1251,-0.0197)
plnorm(tempo, meanlog = betas%*%covariaveis, sdlog = 1.24, log = FALSE)
##Tempo de interesse
tempo<-seq(0,200,1)
covariaveis1<-c(1,0,0,0,1,0,1,0)
betas<-c(2.2619,2.2783,1.8414,1.5244,0.2614,-0.0836,0.1251,-0.0197)
Y1<-plnorm(tempo, meanlog = betas%*%covariaveis1, sdlog = 1.24, log = FALSE)
Y1
##Tempo de interesse
tempo<-seq(0,200,1)
covariaveis1<-c(1,0,0,0,1,0,1,0)
betas<-c(2.2619,2.2783,1.8414,1.5244,0.2614,-0.0836,0.1251,-0.0197)
Y1<-plnorm(tempo, meanlog = betas%*%covariaveis1, sdlog = 1.24, log = FALSE)
summary(Y1)
##Tempo de interesse
tempo<-seq(0,200,1)
covariaveis1<-c(1,0,0,0,1,0,1,0)
betas<-c(2.2619,2.2783,1.8414,1.5244,0.2614,-0.0836,0.1251,-0.0197)
Y1<-plnorm(tempo, meanlog = betas%*%covariaveis1, sdlog = 1.24, log = FALSE)
mean(Y1)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
plot(res)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- gs(bn_df)
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- mmhc(bn_df)
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
library(bnlearn)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
plot(res)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
res$arcs
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
res$arcs
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
res$arcs
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
res$arcs
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
fittedbn <- bn.fit(res, data = bn_df)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
fittedbn <- bn.fit(res, data = bn_df)
cpquery(fittedbn, event = (Proteins=="<3"), evidence = ( Smoking=="no") )
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
fittedbn <- bn.fit(res, data = bn_df)
cpquery(fittedbn, event = (Proteins=="<3"), evidence = ( Smoking=="no") )
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
fittedbn <- bn.fit(res, data = bn_df)
cpquery(fittedbn, event = (Proteins=="<3"), evidence = ( Smoking=="no") )
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
fittedbn <- bn.fit(res, data = bn_df)
cpquery(fittedbn, event = (Proteins=="<3"), evidence = ( Smoking=="no") )
setwd("~/Documents/projetos/data-science/inferenciaBayesiana/vendaProdutos")
setwd("~/Documents/projetos/data-science/analiseExploratoria/vendaProdutos")
vendaProdutosDataSet = read.table('vendaProdutos.csv', header=TRUE, sep=";")
attach(vendaProdutosDataSet)
#histograma
hist(vendaProdutosDataSet->venda)
vendaProdutosDataSet = read.table('vendaProdutos.csv', header=TRUE, sep=";")
attach(vendaProdutosDataSet)
#histograma
hist(vendaProdutosDataSet$venda)
vendaProdutosDataSet = read.table('vendaProdutos.csv', header=TRUE, sep=";")
attach(vendaProdutosDataSet)
#histograma
hist(vendaProdutosDataSet[codProduto == "10106"]$venda)
vendaProdutosDataSet = read.table('vendaProdutos.csv', header=TRUE, sep=";")
attach(vendaProdutosDataSet)
#Filtrar Vendas KUAT
vendas <- vendaProdutosDataSet[codProduto == "10106"]
vendaProdutosDataSet = read.table('vendaProdutos.csv', header=TRUE, sep=";")
attach(vendaProdutosDataSet)
#Filtrar Vendas KUAT
vendas <- vendaProdutosDataSet[vendaProdutosDataSet$codProduto == "10106"]
library(dplyr)
vendaProdutosDataSet = read.table('vendaProdutos.csv', header=TRUE, sep=";")
attach(vendaProdutosDataSet)
#Filtrar Vendas KUAT
vendas <- filter(vendaProdutosDataSet, codProduto == 10106)
View(vendas)
View(vendas)
library(dplyr)
vendaProdutosDataSet = read.table('vendaProdutos.csv', header=TRUE, sep=";")
attach(vendaProdutosDataSet)
#Filtrar Vendas KUAT
vendasKUAT_500ML <- filter(vendaProdutosDataSet, codProduto == 10106)
#histograma
hist(vendasKUAT_500ML$venda)
library(dplyr)
vendaProdutosDataSet = read.table('vendaProdutos.csv', header=TRUE, sep=";")
attach(vendaProdutosDataSet)
#Filtrar Vendas KUAT
vendasKUAT_500ML <- filter(vendaProdutosDataSet, codProduto == 10106)
#histograma
hist(vendasKUAT_500ML$venda,
+ xlab="Vendas - KUAT 500ML",
+ ylab="Frequencia",
+ main="Histograma KUAT 500ML",
+ col = "blue" )
library(dplyr)
vendaProdutosDataSet = read.table('vendaProdutos.csv', header=TRUE, sep=";")
attach(vendaProdutosDataSet)
#Filtrar Vendas KUAT
vendasKUAT_500ML <- filter(vendaProdutosDataSet, codProduto == 10106)
#histograma
hist(vendasKUAT_500ML$venda,
xlab="Vendas - KUAT 500ML",
ylab="Frequencia",
main="Histograma KUAT 500ML",
col = "blue" )
hist(vendasKUAT_500ML$venda,
main="Histograma KUAT 500ML",
col = "blue" )
library(dplyr)
vendaProdutosDataSet = read.table('vendaProdutos.csv', header=TRUE, sep=";")
attach(vendaProdutosDataSet)
#Filtrar Vendas KUAT
vendasKUAT_500ML <- filter(vendaProdutosDataSet, codProduto == 10106)
#histograma
hist(vendasKUAT_500ML$venda,
xlab="Vendas - KUAT 500ML",
ylab="Frequencia",
main="Histograma KUAT 500ML",
col = "blue" )
hist(vendasKUAT_500ML$venda,
xlab="Vendas",
ylab="Frequencia",
main="Histograma KUAT 500ML - Perido de 2010 - 2017",
col = "blue" )
hist(vendasKUAT_500ML$venda,
xlab="Vendas",
ylab="Frequencia",
main="Histograma KUAT 500ML - Periodo de 2010 - 2017",
col = "blue" )
hist(vendasKUAT_500ML$venda,
xlab="Vendas",
ylab="Frequencia",
main="Histograma - Vendas KUAT 500ML",
col = "blue" )
plot( density(vendasKUAT_500ML$venda) )
plot(density(vendasKUAT_500ML$venda) )
lines( density(vendasKUAT_500ML$venda, bw=5), col="blue" )
plot(density(vendasKUAT_500ML$venda) )
lines( density(vendasKUAT_500ML$venda, bw=5), col="blue" )
lines( density(vendasKUAT_500ML$venda, bw=1.5), col="green" )
plot( density(vendasKUAT_500ML$venda, bw=0.5), col="red" )
lines( density(vendasKUAT_500ML$venda, bw=5), col="blue" )
lines( density(vendasKUAT_500ML$venda, bw=1.5), col="green" )
plot( density(vendasKUAT_500ML$venda), col="red" )
lines( density(vendasKUAT_500ML$venda), col="blue" )
lines( density(vendasKUAT_500ML$venda), col="green" )
plot( density(vendasKUAT_500ML$venda), col="blue" )
plot(density(vendasKUAT_500ML$venda), col="blue",
ylab="Densidade")
plot(density(vendasKUAT_500ML$venda), col="blue",
ylab="Densidade",
main="Grafico de Densidade - Vendas KUAT 500ML")
plot(density(vendasKUAT_500ML$venda), col="blue",
ylab="Densidade",
xlab="Vendas",
main="Grafico de Densidade - Vendas KUAT 500ML")
hist(vendasKUAT_500ML$venda,
xlab="Vendas",
ylab="Frequencia",
main="Histograma - Vendas KUAT 500ML",
col = "blue" )
plot(density(vendasKUAT_500ML$venda), col="blue",
ylab="Densidade",
xlab="Vendas",
main="Grafico de Densidade - Vendas KUAT 500ML")
summary(vendaProdutosDataSet)
summary(vendasKUAT_500ML$venda)
#Estatistica Descritiva
summary(vendasKUAT_500ML$venda)
vendasKUAT_500ML <- filter(vendaProdutosDataSet, codProduto == 10106)
summary(vendaProdutosDataSet)
#Estatistica Descritiva - Grupo de Venda
summary(vendaProdutosDataSet$desGrupoVenda)
#Filtrar Vendas KUAT 500ML
vendasKUAT_500ML <- filter(vendaProdutosDataSet, codProduto == 10106)
summary(vendasKUAT_500ML$venda)
sd(vendasKUAT_500ML$venda)
hist(vendasKUAT_500ML$venda,
xlab="Vendas",
ylab="Frequencia",
main="Histograma - Vendas KUAT 500ML",
col = "blue" )
plot(density(vendasKUAT_500ML$venda), col="blue",
ylab="Densidade",
xlab="Vendas",
main="Grafico de Densidade - Vendas KUAT 500ML")
hist(vendasKUAT_500ML$venda,
xlab="Vendas",
ylab="Frequencia",
main="Histograma - Vendas KUAT 500ML",
col = "blue" )
#Analise de Densidade
line(density(vendasKUAT_500ML$venda), col="blue",
ylab="Densidade",
xlab="Vendas",
main="Grafico de Densidade - Vendas KUAT 500ML")
hist(vendasKUAT_500ML$venda,
xlab="Vendas",
ylab="Frequencia",
main="Histograma - Vendas KUAT 500ML",
col = "blue" )
#Analise de Densidade
line(density(vendasKUAT_500ML$venda), col="blue",
ylab="Densidade",
xlab="Vendas",
main="Grafico de Densidade - Vendas KUAT 500ML")
hist(vendasKUAT_500ML$venda,
xlab="Vendas",
ylab="Frequencia",
main="Histograma - Vendas KUAT 500ML",
col = "blue" )
#Analise de Densidade
abline(density(vendasKUAT_500ML$venda), col="blue",
ylab="Densidade",
xlab="Vendas",
main="Grafico de Densidade - Vendas KUAT 500ML")
hist(vendasKUAT_500ML$venda,
xlab="Vendas",
ylab="Frequencia",
main="Histograma - Vendas KUAT 500ML",
col = "blue" )
#Analise de Densidade
abline(density(vendasKUAT_500ML$venda), col="blue",
ylab="Densidade",
xlab="Vendas",
main="Grafico de Densidade - Vendas KUAT 500ML")
hist(vendasKUAT_500ML$venda,
xlab="Vendas",
ylab="Frequencia",
main="Histograma - Vendas KUAT 500ML",
col = "blue" )
#Analise de Densidade
plot(density(vendasKUAT_500ML$venda), col="blue",
ylab="Densidade",
xlab="Vendas",
main="Grafico de Densidade - Vendas KUAT 500ML")
library(ggplot2)
qplot(vendasKUAT_500ML$venda, geom="histogram")
hist(vendasKUAT_500ML$venda,
xlab="Vendas",
ylab="Frequencia",
main="Histograma - Vendas KUAT 500ML",
col = "blue" )
plot(density(vendasKUAT_500ML$venda), col="blue",
ylab="Densidade",
xlab="Vendas",
main="Diagrama de Densidade - Vendas KUAT 500ML")
