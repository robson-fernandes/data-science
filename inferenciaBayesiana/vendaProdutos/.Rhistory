res <- hc(bn_df,dag)
g <- graphviz.plot(res)
library(bnlearn)
library(forecast)
library(Rgraphviz)
vendaProdutosDataSet = read.table('vendaProdutos.csv', header=TRUE, sep=";")
attach(vendaProdutosDataSet)
#Modelo da Rede Bayesiana
dag <- model2network("[codProduto][codGrupoVenda|codProduto][quantidadeIntervalo|codGrupoVenda][vendaIntervalo|quantidadeIntervalo:codGrupoVenda][desDiaSemana|vendaIntervalo]")
#plot(dag)
train.vendaProdutosDataSet = vendaProdutosDataSet[1:10000, c("quantidadeIntervalo", "vendaIntervalo", "desDiaSemana", "codProduto", "codGrupoVenda")]
## Definir todas as variáveis do conjunto como categoricas
train.vendaProdutosDataSet$quantidadeIntervalo = as.factor(train.vendaProdutosDataSet$quantidadeIntervalo)
train.vendaProdutosDataSet$vendaIntervalo = as.factor(train.vendaProdutosDataSet$vendaIntervalo)
train.vendaProdutosDataSet$desDiaSemana = as.factor(train.vendaProdutosDataSet$desDiaSemana)
train.vendaProdutosDataSet$codProduto = as.factor(train.vendaProdutosDataSet$codProduto)
train.vendaProdutosDataSet$codGrupoVenda = as.factor(train.vendaProdutosDataSet$codGrupoVenda)
bn_df <- data.frame(train.vendaProdutosDataSet)
res <- hc(bn_df,dag)
g <- graphviz.plot(res)
#Criacao da Rede
#
# Algoritmo um hibrido HC (Hill Climbing).
#
# Esses algoritmo foi utilizado por
# ser representativo em sua categoria
#e apresentarem bom desempenho se comparado a outros algoritmos
res <- custom.fit(bn_df,dag)
g <- graphviz.plot(res)
res <- mmhc(bn_df,dag)
g <- graphviz.plot(res)
res <- mmhc(bn_df,dag)
g <- graphviz.plot(res)
dag <- model2network("[codProduto][codGrupoVenda|codProduto][quantidadeIntervalo|codGrupoVenda][vendaIntervalo|quantidadeIntervalo:codGrupoVenda][desDiaSemana|vendaIntervalo]")
plot(dag)
res <- hc(bn_df)
g <- graphviz.plot(res)
train.vendaProdutosDataSet = vendaProdutosDataSet[1:200000, c("quantidadeIntervalo", "vendaIntervalo", "desDiaSemana", "codProduto", "codGrupoVenda")]
## Definir todas as variáveis do conjunto como categoricas
train.vendaProdutosDataSet$quantidadeIntervalo = as.factor(train.vendaProdutosDataSet$quantidadeIntervalo)
train.vendaProdutosDataSet$vendaIntervalo = as.factor(train.vendaProdutosDataSet$vendaIntervalo)
train.vendaProdutosDataSet$desDiaSemana = as.factor(train.vendaProdutosDataSet$desDiaSemana)
train.vendaProdutosDataSet$codProduto = as.factor(train.vendaProdutosDataSet$codProduto)
train.vendaProdutosDataSet$codGrupoVenda = as.factor(train.vendaProdutosDataSet$codGrupoVenda)
bn_df <- data.frame(train.vendaProdutosDataSet)
#Criacao da Rede
#
# Algoritmo um hibrido HC (Hill Climbing).
#
# Esses algoritmo foi utilizado por
# ser representativo em sua categoria
#e apresentarem bom desempenho se comparado a outros algoritmos
res <- hc(bn_df)
g <- graphviz.plot(res)
#Formatacao da Rede Bayesiana
style <- list(node=list(fillcolor="#70B2E1",
textCol="white",
color="gray",
fontsize=11,
fontcolor="white",
height=3,
lwd=2
),
edge=list(color="#70B2E1",arrowsize=".3")
)
defAttrs <- getDefaultAttrs()
z <- letters[1:numNodes(g)]
z <- c("quantidade","venda", "dia", "produto", "grupo")
names(z) <- nodes(g)
nAttrs <- list()
nAttrs$label <- z
nAttrs
plot(g, nodeAttrs=nAttrs, attrs=style)
a <- cpquery(fittedbn,
event = (vendaIntervalo == "50-100"),
evidence = (desDiaSemana =="Domingo"  & codGrupoVenda=="1" ) )
percentual = a * 100
percentual
fittedbn <- bn.fit(res, data = bn_df, method="mle")
#Tabela de Probabilidade DiaSemana - Tipo de Venda
#print(fittedbn$descricaoDiaSemana)
#print(fittedbn$quantidadeIntervalo)
#Inferencia
# Qual a chance - > Evidencia
# de ocorrer o evento
#Qual a chance de em Janeiro,
a <- cpquery(fittedbn,
event = (vendaIntervalo == "50-100"),
evidence = (desDiaSemana =="Domingo"  & codGrupoVenda=="1" ) )
percentual = a * 100
percentual
fittedbn <- bn.fit(res, data = bn_df, method="mle")
#Tabela de Probabilidade DiaSemana - Tipo de Venda
#print(fittedbn$descricaoDiaSemana)
#print(fittedbn$quantidadeIntervalo)
#Inferencia
# Qual a chance - > Evidencia
# de ocorrer o evento
#Qual a chance de em Janeiro,
a <- cpquery(fittedbn,
event = (vendaIntervalo == "50-100"),
evidence = (desDiaSemana =="Domingo"  & codGrupoVenda=="1" ) )
percentual = a * 100
percentual
a <- cpquery(fittedbn,
event = (vendaIntervalo == "50-100"),
evidence = (desDiaSemana =="Segunda-Feira"  & codGrupoVenda=="1" ) )
percentual = a * 100
percentual
a <- cpquery(fittedbn,
event = (vendaIntervalo == "50-100"),
evidence = (desDiaSemana =="Segunda-Feira"  & codGrupoVenda=="1" ) )
percentual = a * 100
percentual
a <- cpquery(fittedbn,
event = (vendaIntervalo == "50-100"),
evidence = (desDiaSemana =="Segunda-Feira"  & codGrupoVenda=="1" ) )
percentual = a * 100
percentual
a <- cpquery(fittedbn,
event = (vendaIntervalo == "50-100"),
evidence = (desDiaSemana =="Segunda-feira"  & codGrupoVenda=="1" ) )
percentual = a * 100
percentual
a <- cpquery(fittedbn,
event = (vendaIntervalo == "50-100"),
evidence = (desDiaSemana =="Segunda-feira"  & codGrupoVenda=="1" ) )
percentual = a * 100
percentual
a <- cpquery(fittedbn,
event = (vendaIntervalo == "50-100"),
evidence = (desDiaSemana =="Segunda-feira"  & codGrupoVenda=="1" ) )
percentual = a * 100
percentual
a <- cpquery(fittedbn,
event = (vendaIntervalo == "0-50"),
evidence = (desDiaSemana =="Segunda-feira"  & codGrupoVenda=="1" ) )
percentual = a * 100
percentual
a <- cpquery(fittedbn,
event = (vendaIntervalo == "0-50"),
evidence = (desDiaSemana =="Segunda-feira"  & codGrupoVenda=="1" ) )
percentual = a * 100
percentual
a <- cpquery(fittedbn,
event = (vendaIntervalo == "0-50"),
evidence = (desDiaSemana =="Segunda-feira"  & codGrupoVenda=="1" ) )
percentual = a * 100
percentual
a <- cpquery(fittedbn,
event = (vendaIntervalo == "0-50"),
evidence = (desDiaSemana =="Segunda-feira"  & codGrupoVenda=="1" ) )
percentual = a * 100
percentual
a <- cpquery(fittedbn,
event = (vendaIntervalo == "0-50"),
evidence = (desDiaSemana =="Domingo"  & codGrupoVenda=="1" ) )
percentual = a * 100
percentual
a <- cpquery(fittedbn,
event = (vendaIntervalo == "0-50"),
evidence = (desDiaSemana =="Domingo"  & codGrupoVenda=="1" & codProduto = "10106") )
percentual = a * 100
percentual
a <- cpquery(fittedbn,
event = (vendaIntervalo == "0-50"),
evidence = (desDiaSemana =="Domingo"  & codGrupoVenda=="1" & codProduto = "10106") )
percentual = a * 100
percentual
a <- cpquery(fittedbn,
event = (vendaIntervalo == "0-50"),
evidence = (desDiaSemana =="Domingo"  & codGrupoVenda=="1" & codProduto = "10106") )
percentual = a * 100
percentual
a <- cpquery(fittedbn,
event = (vendaIntervalo == "0-50"),
evidence = (desDiaSemana =="Domingo"  & codGrupoVenda=="1" & codProduto == "10106") )
percentual = a * 100
percentual
a <- cpquery(fittedbn,
event = (vendaIntervalo == "0-50"),
evidence = (desDiaSemana =="Domingo"  & codGrupoVenda=="1" & codProduto == "10106") )
percentual = a * 100
percentual
a <- cpquery(fittedbn,
event = (vendaIntervalo == "0-50"),
evidence = (desDiaSemana =="Domingo"  & codGrupoVenda=="1" & codProduto == "10106") )
percentual = a * 100
percentual
a <- cpquery(fittedbn,
event = (vendaIntervalo == "0-50"),
evidence = (desDiaSemana =="Domingo"  & codGrupoVenda=="1" & codProduto == "10106") )
percentual = a * 100
percentual
a <- cpquery(fittedbn,
event = (vendaIntervalo == "0-50"),
evidence = (desDiaSemana =="Domingo"  & codGrupoVenda=="1" & codProduto == "10106") )
percentual = a * 100
percentual
a <- cpquery(fittedbn,
event = (vendaIntervalo == "0-50"),
evidence = (desDiaSemana =="Domingo"  & codGrupoVenda=="1" & codProduto == "10106") )
percentual = a * 100
percentual
a <- cpquery(fittedbn,
event = (vendaIntervalo == "0-50"),
evidence = (desDiaSemana =="Domingo"  & codGrupoVenda=="1" & codProduto == "10106") )
percentual = a * 100
percentual
a <- cpquery(fittedbn,
event = (vendaIntervalo == "5-100"),
evidence = (desDiaSemana =="Domingo"  & codGrupoVenda=="1" & codProduto == "10106") )
percentual = a * 100
percentual
a <- cpquery(fittedbn,
event = (vendaIntervalo == "5-100"),
evidence = (desDiaSemana =="Domingo"  & codGrupoVenda=="1" & codProduto == "10106") )
percentual = a * 100
percentual
a <- cpquery(fittedbn,
event = (vendaIntervalo == "0-50"),
evidence = (desDiaSemana =="Domingo"  & codGrupoVenda=="1" & codProduto == "10106") )
percentual = a * 100
percentual
#Inferencia
# Qual a Probabilidade de Venda entre 0-50
# Dado que seja Domingo,
# Grupo de Vendas = BEBIDAS
# Produto = KUAT 500ML
a <- cpquery(fittedbn,
event = (vendaIntervalo == "0-50"),
evidence = (desDiaSemana =="Domingo"  & codGrupoVenda=="1" & codProduto == "10106") )
percentual = a * 100
percentual
#Inferencia
# Qual a Probabilidade de Venda entre 0-50
# Dado que seja Domingo,
# Grupo de Vendas = BEBIDAS
# Produto = KUAT 500ML
a <- cpquery(fittedbn,
event = (vendaIntervalo == "0-50"),
evidence = (desDiaSemana =="Domingo"  & codGrupoVenda=="1" & codProduto == "10106") )
percentual = a * 100
percentual
dag <- model2network("[codProduto][codGrupoVenda|codProduto][quantidadeIntervalo|codGrupoVenda][vendaIntervalo|quantidadeIntervalo:codGrupoVenda][desDiaSemana|vendaIntervalo]")
plot(dag)
dag <- model2network("[codProduto][codGrupoVenda|codProduto][quantidadeIntervalo|codGrupoVenda][vendaIntervalo|quantidadeIntervalo:codGrupoVenda][desDiaSemana|vendaIntervalo]")
plot(dag)
library(bnlearn)
library(Rgraphviz)
vendaProdutosDataSet = read.table('vendaProdutos.csv', header=TRUE, sep=";")
attach(vendaProdutosDataSet)
#Modelo da Rede Bayesiana
dag <- model2network("[codProduto][codGrupoVenda|codProduto][quantidadeIntervalo|codGrupoVenda][vendaIntervalo|quantidadeIntervalo:codGrupoVenda][desDiaSemana|vendaIntervalo]")
plot(dag)
train.vendaProdutosDataSet = vendaProdutosDataSet[1:200000, c("quantidadeIntervalo", "vendaIntervalo", "desDiaSemana", "codProduto", "codGrupoVenda")]
## Definir todas as variáveis do conjunto como categoricas
train.vendaProdutosDataSet$quantidadeIntervalo = as.factor(train.vendaProdutosDataSet$quantidadeIntervalo)
train.vendaProdutosDataSet$vendaIntervalo = as.factor(train.vendaProdutosDataSet$vendaIntervalo)
train.vendaProdutosDataSet$desDiaSemana = as.factor(train.vendaProdutosDataSet$desDiaSemana)
train.vendaProdutosDataSet$codProduto = as.factor(train.vendaProdutosDataSet$codProduto)
train.vendaProdutosDataSet$codGrupoVenda = as.factor(train.vendaProdutosDataSet$codGrupoVenda)
bn_df <- data.frame(train.vendaProdutosDataSet)
#Criacao da Rede
#
# Algoritmo um hibrido HC (Hill Climbing).
#
# Esses algoritmo foi utilizado por
# ser representativo em sua categoria
#e apresentarem bom desempenho se comparado a outros algoritmos
res <- hc(bn_df)
g <- graphviz.plot(res)
#Formatacao da Rede Bayesiana
style <- list(node=list(fillcolor="#70B2E1",
textCol="white",
color="gray",
fontsize=11,
fontcolor="white",
height=3,
lwd=2
),
edge=list(color="#70B2E1",arrowsize=".3")
)
defAttrs <- getDefaultAttrs()
z <- letters[1:numNodes(g)]
z <- c("quantidade","venda", "dia", "produto", "grupo")
names(z) <- nodes(g)
nAttrs <- list()
nAttrs$label <- z
nAttrs
plot(g, nodeAttrs=nAttrs, attrs=style)
#Treinamento
#O algoritmo EM - usado para encontrar a maxima probabilidade de parametros
# de modelos estatisticos com base em dados nao observados.
#Expectation-Maximization (EM) Algorithm
fittedbn <- bn.fit(res, data = bn_df, method="mle")
#Inferencia
# Qual a Probabilidade de Venda entre 0-50
# Dado que seja Domingo,
# Grupo de Vendas = BEBIDAS
# Produto = KUAT 500ML
a <- cpquery(fittedbn,
event = (vendaIntervalo == "0-50"),
evidence = (desDiaSemana =="Domingo"  & codGrupoVenda=="1" & codProduto == "10106") )
percentual = a * 100
percentual
library(bnlearn)
library(Rgraphviz)
vendaProdutosDataSet = read.table('vendaProdutos.csv', header=TRUE, sep=";")
attach(vendaProdutosDataSet)
#Modelo da Rede Bayesiana
dag <- model2network("[codProduto][codGrupoVenda|codProduto][quantidadeIntervalo|codGrupoVenda][vendaIntervalo|quantidadeIntervalo:codGrupoVenda][desDiaSemana|vendaIntervalo]")
plot(dag)
train.vendaProdutosDataSet = vendaProdutosDataSet[1:200000, c("quantidadeIntervalo", "vendaIntervalo", "desDiaSemana", "codProduto", "codGrupoVenda", "mes")]
##Definir todas as variaveis do conjunto como categoricas
train.vendaProdutosDataSet$quantidadeIntervalo = as.factor(train.vendaProdutosDataSet$quantidadeIntervalo)
train.vendaProdutosDataSet$vendaIntervalo = as.factor(train.vendaProdutosDataSet$vendaIntervalo)
train.vendaProdutosDataSet$desDiaSemana = as.factor(train.vendaProdutosDataSet$desDiaSemana)
train.vendaProdutosDataSet$codProduto = as.factor(train.vendaProdutosDataSet$codProduto)
train.vendaProdutosDataSet$codGrupoVenda = as.factor(train.vendaProdutosDataSet$codGrupoVenda)
train.vendaProdutosDataSet$mes = as.factor(train.vendaProdutosDataSet$mes)
bn_df <- data.frame(train.vendaProdutosDataSet)
#Criacao da Rede
#
# Algoritmo um hibrido HC (Hill Climbing).
#
# Esses algoritmo foi utilizado por
# ser representativo em sua categoria
# e apresentarem bom desempenho se comparado a outros algoritmos
res <- hc(bn_df)
g <- graphviz.plot(res)
#Formatacao da Rede Bayesiana
style <- list(node=list(fillcolor="#70B2E1",
textCol="white",
color="gray",
fontsize=11,
fontcolor="white",
height=3,
lwd=2
),
edge=list(color="#70B2E1",arrowsize=".3")
)
defAttrs <- getDefaultAttrs()
z <- letters[1:numNodes(g)]
z <- c("quantidade","venda", "dia", "produto", "grupo")
names(z) <- nodes(g)
nAttrs <- list()
nAttrs$label <- z
nAttrs
plot(g, nodeAttrs=nAttrs, attrs=style)
#Treinamento
#O algoritmo EM - usado para encontrar a maxima probabilidade de parametros
# de modelos estatisticos com base em dados nao observados.
#Expectation-Maximization (EM) Algorithm
fittedbn <- bn.fit(res, data = bn_df, method="mle")
#Inferencia
# Qual a Probabilidade de Venda entre 0-50
# Dado que seja Domingo,
# Grupo de Vendas = BEBIDAS
# Produto = KUAT 500ML
a <- cpquery(fittedbn,
event = (vendaIntervalo == "0-50"),
evidence = (desDiaSemana =="Domingo"  & codGrupoVenda=="1" & codProduto == "10106") )
percentual = a * 100
percentual
library(bnlearn)
library(Rgraphviz)
vendaProdutosDataSet = read.table('vendaProdutos.csv', header=TRUE, sep=";")
attach(vendaProdutosDataSet)
#Modelo da Rede Bayesiana
dag <- model2network("[codProduto][codGrupoVenda|codProduto][quantidadeIntervalo|codGrupoVenda][vendaIntervalo|quantidadeIntervalo:codGrupoVenda][desDiaSemana|vendaIntervalo]")
plot(dag)
train.vendaProdutosDataSet = vendaProdutosDataSet[1:200000, c("quantidadeIntervalo", "mes","vendaIntervalo", "desDiaSemana", "codProduto", "codGrupoVenda")]
##Definir todas as variaveis do conjunto como categoricas
train.vendaProdutosDataSet$quantidadeIntervalo = as.factor(train.vendaProdutosDataSet$quantidadeIntervalo)
train.vendaProdutosDataSet$vendaIntervalo = as.factor(train.vendaProdutosDataSet$vendaIntervalo)
train.vendaProdutosDataSet$desDiaSemana = as.factor(train.vendaProdutosDataSet$desDiaSemana)
train.vendaProdutosDataSet$codProduto = as.factor(train.vendaProdutosDataSet$codProduto)
train.vendaProdutosDataSet$codGrupoVenda = as.factor(train.vendaProdutosDataSet$codGrupoVenda)
train.vendaProdutosDataSet$mes = as.factor(train.vendaProdutosDataSet$mes)
bn_df <- data.frame(train.vendaProdutosDataSet)
#Criacao da Rede
#
# Algoritmo um hibrido HC (Hill Climbing).
#
# Esses algoritmo foi utilizado por
# ser representativo em sua categoria
# e apresentarem bom desempenho se comparado a outros algoritmos
res <- hc(bn_df)
g <- graphviz.plot(res)
#Formatacao da Rede Bayesiana
style <- list(node=list(fillcolor="#70B2E1",
textCol="white",
color="gray",
fontsize=11,
fontcolor="white",
height=3,
lwd=2
),
edge=list(color="#70B2E1",arrowsize=".3")
)
defAttrs <- getDefaultAttrs()
z <- letters[1:numNodes(g)]
z <- c("quantidade","venda", "dia", "produto", "grupo")
names(z) <- nodes(g)
nAttrs <- list()
nAttrs$label <- z
nAttrs
plot(g, nodeAttrs=nAttrs, attrs=style)
#Treinamento
#O algoritmo EM - usado para encontrar a maxima probabilidade de parametros
# de modelos estatisticos com base em dados nao observados.
#Expectation-Maximization (EM) Algorithm
fittedbn <- bn.fit(res, data = bn_df, method="mle")
#Inferencia
# Qual a Probabilidade de Venda entre 0-50
# Dado que seja Domingo,
# Grupo de Vendas = BEBIDAS
# Produto = KUAT 500ML
a <- cpquery(fittedbn,
event = (vendaIntervalo == "0-50"),
evidence = (desDiaSemana =="Domingo"  & codGrupoVenda=="1" & codProduto == "10106") )
percentual = a * 100
percentual
library(bnlearn)
library(Rgraphviz)
vendaProdutosDataSet = read.table('vendaProdutos.csv', header=TRUE, sep=";")
attach(vendaProdutosDataSet)
#Modelo da Rede Bayesiana
dag <- model2network("[codProduto][codGrupoVenda|codProduto][quantidadeIntervalo|codGrupoVenda][vendaIntervalo|quantidadeIntervalo:codGrupoVenda][desDiaSemana|vendaIntervalo]")
plot(dag)
train.vendaProdutosDataSet = vendaProdutosDataSet[1:200000, c("quantidadeIntervalo", "vendaIntervalo", "desDiaSemana", "codProduto", "codGrupoVenda")]
##Definir todas as variaveis do conjunto como categoricas
train.vendaProdutosDataSet$quantidadeIntervalo = as.factor(train.vendaProdutosDataSet$quantidadeIntervalo)
train.vendaProdutosDataSet$vendaIntervalo = as.factor(train.vendaProdutosDataSet$vendaIntervalo)
train.vendaProdutosDataSet$desDiaSemana = as.factor(train.vendaProdutosDataSet$desDiaSemana)
train.vendaProdutosDataSet$codProduto = as.factor(train.vendaProdutosDataSet$codProduto)
train.vendaProdutosDataSet$codGrupoVenda = as.factor(train.vendaProdutosDataSet$codGrupoVenda)
bn_df <- data.frame(train.vendaProdutosDataSet)
#Criacao da Rede
#
# Algoritmo um hibrido HC (Hill Climbing).
#
# Esses algoritmo foi utilizado por
# ser representativo em sua categoria
# e apresentarem bom desempenho se comparado a outros algoritmos
res <- hc(bn_df)
g <- graphviz.plot(res)
#Formatacao da Rede Bayesiana
style <- list(node=list(fillcolor="#70B2E1",
textCol="white",
color="gray",
fontsize=11,
fontcolor="white",
height=3,
lwd=2
),
edge=list(color="#70B2E1",arrowsize=".3")
)
defAttrs <- getDefaultAttrs()
z <- letters[1:numNodes(g)]
z <- c("quantidade","venda", "dia", "produto", "grupo")
names(z) <- nodes(g)
nAttrs <- list()
nAttrs$label <- z
nAttrs
plot(g, nodeAttrs=nAttrs, attrs=style)
#Treinamento
#O algoritmo EM - usado para encontrar a maxima probabilidade de parametros
# de modelos estatisticos com base em dados nao observados.
#Expectation-Maximization (EM) Algorithm
fittedbn <- bn.fit(res, data = bn_df, method="mle")
#Inferencia
# Qual a Probabilidade de Venda entre 0-50
# Dado que seja Domingo,
# Grupo de Vendas = BEBIDAS
# Produto = KUAT 500ML
a <- cpquery(fittedbn,
event = (vendaIntervalo == "0-50"),
evidence = (desDiaSemana =="Domingo"  & codGrupoVenda=="1" & codProduto == "10106") )
percentual = a * 100
percentual
a <- cpquery(fittedbn,
event = (vendaIntervalo == "0-50"),
evidence = (desDiaSemana =="Domingo"  & codGrupoVenda=="1" & codProduto == "10106") )
percentual = a * 100
percentual
a <- cpquery(fittedbn,
event = (vendaIntervalo == "0-50"),
evidence = (desDiaSemana =="Domingo"  & codGrupoVenda=="1" & codProduto == "10106") )
percentual = a * 100
percentual
a <- cpquery(fittedbn,
event = (vendaIntervalo == "0-50"),
evidence = (desDiaSemana =="Domingo"  & codGrupoVenda=="1" & codProduto == "10106") )
percentual = a * 100
percentual
a <- cpquery(fittedbn,
event = (vendaIntervalo == "0-50"),
evidence = (desDiaSemana =="Domingo"  & codGrupoVenda=="1" & codProduto == "10106") )
percentual = a * 100
percentual
a <- cpquery(fittedbn,
event = (vendaIntervalo == "0-50"),
evidence = (desDiaSemana =="Domingo"  & codGrupoVenda=="1" & codProduto == "10106") )
percentual = a * 100
percentual
a <- cpquery(fittedbn,
event = (vendaIntervalo == "0-50"),
evidence = (desDiaSemana =="Domingo"  & codGrupoVenda=="1" & codProduto == "10106") )
percentual = a * 100
percentual
