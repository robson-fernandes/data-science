3.50, 3.58, 4.19, 3.78, 3.71, 3.73, 3.78),
lnWeight = c(4.87, 3.93, 6.46, 3.33, 4.38, 4.70, 3.50, 4.50,
3.58, 3.64, 5.90, 4.43, 4.38, 4.42, 4.25)
)
xyplot(lnWeight ~ lnLength, data = alligator,
xlab = "Snout vent length (inches) on log scale",
ylab = "Weight (pounds) on log scale",
main = "Alligators in Central Florida"
)
library(plotly)
alligator = data.frame(
lnLength = c(3.87, 3.61, 4.33, 3.43, 3.81, 3.83, 3.46, 3.76,
3.50, 3.58, 4.19, 3.78, 3.71, 3.73, 3.78),
lnWeight = c(4.87, 3.93, 6.46, 3.33, 4.38, 4.70, 3.50, 4.50,
3.58, 3.64, 5.90, 4.43, 4.38, 4.42, 4.25)
)
plot_ly(lnWeight ~ lnLength, data = alligator,
xlab = "Snout vent length (inches) on log scale",
ylab = "Weight (pounds) on log scale",
main = "Alligators in Central Florida"
)
library(plotly)
alligator = data.frame(
lnLength = c(3.87, 3.61, 4.33, 3.43, 3.81, 3.83, 3.46, 3.76,
3.50, 3.58, 4.19, 3.78, 3.71, 3.73, 3.78),
lnWeight = c(4.87, 3.93, 6.46, 3.33, 4.38, 4.70, 3.50, 4.50,
3.58, 3.64, 5.90, 4.43, 4.38, 4.42, 4.25)
)
plot_ly(lnWeight ~ lnLength, data = alligator,
xlab = "Snout vent length (inches) on log scale",
ylab = "Weight (pounds) on log scale",
main = "Alligators in Central Florida"
)
library(plotly)
alligator = data.frame(
lnLength = c(3.87, 3.61, 4.33, 3.43, 3.81, 3.83, 3.46, 3.76,
3.50, 3.58, 4.19, 3.78, 3.71, 3.73, 3.78),
lnWeight = c(4.87, 3.93, 6.46, 3.33, 4.38, 4.70, 3.50, 4.50,
3.58, 3.64, 5.90, 4.43, 4.38, 4.42, 4.25)
)
p <- plot_ly(data = alligator, x = ~lnWeight, y = ~lnLength)
chart_link = plotly_POST(p, filename="scatter/basic")
chart_link
library(plotly)
alligator = data.frame(
lnLength = c(3.87, 3.61, 4.33, 3.43, 3.81, 3.83, 3.46, 3.76,
3.50, 3.58, 4.19, 3.78, 3.71, 3.73, 3.78),
lnWeight = c(4.87, 3.93, 6.46, 3.33, 4.38, 4.70, 3.50, 4.50,
3.58, 3.64, 5.90, 4.43, 4.38, 4.42, 4.25)
)
p <- plot_ly(data = alligator, x = ~lnWeight, y = ~lnLength)
chart_link = plotly_POST(p, filename="scatter/basic")
chart_link
library(plotly)
alligator = data.frame(
lnLength = c(3.87, 3.61, 4.33, 3.43, 3.81, 3.83, 3.46, 3.76,
3.50, 3.58, 4.19, 3.78, 3.71, 3.73, 3.78),
lnWeight = c(4.87, 3.93, 6.46, 3.33, 4.38, 4.70, 3.50, 4.50,
3.58, 3.64, 5.90, 4.43, 4.38, 4.42, 4.25)
)
p <- plot_ly(data = alligator, x = ~lnWeight, y = ~lnLength)
chart_link = plotly_POST(p, filename="scatter/basic")
library(plotly)
alligator = data.frame(
lnLength = c(3.87, 3.61, 4.33, 3.43, 3.81, 3.83, 3.46, 3.76,
3.50, 3.58, 4.19, 3.78, 3.71, 3.73, 3.78),
lnWeight = c(4.87, 3.93, 6.46, 3.33, 4.38, 4.70, 3.50, 4.50,
3.58, 3.64, 5.90, 4.43, 4.38, 4.42, 4.25)
)
p <- plot_ly(data = alligator, x = ~lnWeight, y = ~lnLength)
chart_link = plotly_POST(p)
chart_link
library(plotly)
p <- plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length, color = ~Species)
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = plotly_POST(p, filename="scatter/color")
chart_link
Y1<-plnorm(tempo, meanlog = betas%*%covariaveis, sdlog = 1.24, log = FALSE)
##Tempo de interesse
tempo<-seq(0,200,1)
covariaveis1<-c(1,0,0,0,1,0,1,0)
betas<-c(2.2619,2.2783,1.8414,1.5244,0.2614,-0.0836,0.1251,-0.0197)
Y1<-plnorm(tempo, meanlog = betas%*%covariaveis, sdlog = 1.24, log = FALSE)
##Tempo de interesse
tempo<-seq(0,200,1)
covariaveis1<-c(1,0,0,0,1,0,1,0)
betas<-c(2.2619,2.2783,1.8414,1.5244,0.2614,-0.0836,0.1251,-0.0197)
Y1<-plnorm(tempo, meanlog = betas%*%covariaveis, sdlog = 1.24, log = FALSE)
Y1
##Tempo de interesse
tempo<-seq(0,200,1)
##Tempo de interesse
tempo<-seq(0,200,1)
covariaveis1<-c(1,0,0,0,1,0,1,0)
betas<-c(2.2619,2.2783,1.8414,1.5244,0.2614,-0.0836,0.1251,-0.0197)
plnorm(tempo, meanlog = betas%*%covariaveis, sdlog = 1.24, log = FALSE)
##Tempo de interesse
tempo<-seq(0,200,1)
covariaveis1<-c(1,0,0,0,1,0,1,0)
betas<-c(2.2619,2.2783,1.8414,1.5244,0.2614,-0.0836,0.1251,-0.0197)
Y1<-plnorm(tempo, meanlog = betas%*%covariaveis1, sdlog = 1.24, log = FALSE)
Y1
##Tempo de interesse
tempo<-seq(0,200,1)
covariaveis1<-c(1,0,0,0,1,0,1,0)
betas<-c(2.2619,2.2783,1.8414,1.5244,0.2614,-0.0836,0.1251,-0.0197)
Y1<-plnorm(tempo, meanlog = betas%*%covariaveis1, sdlog = 1.24, log = FALSE)
summary(Y1)
##Tempo de interesse
tempo<-seq(0,200,1)
covariaveis1<-c(1,0,0,0,1,0,1,0)
betas<-c(2.2619,2.2783,1.8414,1.5244,0.2614,-0.0836,0.1251,-0.0197)
Y1<-plnorm(tempo, meanlog = betas%*%covariaveis1, sdlog = 1.24, log = FALSE)
mean(Y1)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
plot(res)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- gs(bn_df)
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- mmhc(bn_df)
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
library(bnlearn)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
plot(res)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
res$arcs
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
res$arcs
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
res$arcs
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
res$arcs
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
fittedbn <- bn.fit(res, data = bn_df)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
fittedbn <- bn.fit(res, data = bn_df)
cpquery(fittedbn, event = (Proteins=="<3"), evidence = ( Smoking=="no") )
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
fittedbn <- bn.fit(res, data = bn_df)
cpquery(fittedbn, event = (Proteins=="<3"), evidence = ( Smoking=="no") )
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
fittedbn <- bn.fit(res, data = bn_df)
cpquery(fittedbn, event = (Proteins=="<3"), evidence = ( Smoking=="no") )
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
fittedbn <- bn.fit(res, data = bn_df)
cpquery(fittedbn, event = (Proteins=="<3"), evidence = ( Smoking=="no") )
library(e1071)
duration = c(1,3,5,6,8,10,15)
kurtosis(duration)
var(duration)
moment(c)
library(e1071)
c = c(1,3,5,6,8,10,15)
moment(c)
sd(c)
sd(c)
moment(c)
sd(c)
sd(c)^4
library(e1071)
c = c(1,3,5,6,8,10,15)
desvioPadrao = sd(c)
variancia  = var(c)
k = 1
momento1 = desvioPadrao^k / variancia^k
library(e1071)
c = c(1,3,5,6,8,10,15)
desvioPadrao = sd(c)
variancia  = var(c)
k = 1
momento1 = desvioPadrao^k / variancia^k
library(e1071)
c = c(1,3,5,6,8,10,15)
desvioPadrao = sd(c)
variancia  = var(c)
k = 1
momento1 = desvioPadrao^k / variancia^k
momento1
moment(c)
library(e1071)
c = c(1,3,5,6,8,10,15)
desvioPadrao = sd(c)
variancia  = var(c)
k = 1
momento1 = desvioPadrao^k / variancia^k
momento1
moment(c)
moment(c, order=1, center=TRUE)
k = 1
momento1 = desvioPadrao^k / variancia^k
momento1
moment(c, order=1, center=TRUE)
moment(c, order=1)
moment(c, order=2)
k = 2
momento1 = desvioPadrao^k / variancia^k
momento1
mean(c)
moment(c, order=1)
desvioPadrao = sd(c)
variancia  = var(c)
moment(c, order=1)
moment(c, order=4)
kurtosis(c)
skewness(c)
moment(c, order=2)
moment(c, order=1)
moment(c, order=2)
moment(c)
moment(c)
moment(c)
moment(c, order=1,center = TRUE)
moment(c, order=2,center = TRUE)
moment(c, order=2,center = TRUE)
variancia  = var(c)
variancia  = var(c)
variancia
moment(c, order=2,center = TRUE)
moment(c, order=3,center = TRUE)
moment(c, order=1,center = TRUE)
-12.428 + 12.429
-12.428 + 12.429 / 6
(-12.428 + 12.429) / 6
moment(c, order=1,center = TRUE)
(-12.428 + 12.429) / 6
moment(c, order=2,center = TRUE)
k = 2
momento1 =  variancia^k / desvioPadrao^k
momento1
k = 1
momento1 =  variancia^k / desvioPadrao^k
momento1
k = 1
momento1 =  variancia^k / desvioPadrao^k
momento1
k = 2
momento1 =  variancia^k / desvioPadrao^k
momento1
setwd("~/Documents/projetos/data-science/inferenciaBayesiana/vendaProdutos")
library(bnlearn)
library(Rgraphviz)
vendaProdutosDataSet = read.table('vendaProdutos.csv', header=TRUE, sep=";")
attach(vendaProdutosDataSet)
View(vendaProdutosDataSet)
library(bnlearn)
library(Rgraphviz)
vendaProdutosDataSet = read.table('vendaProdutos.csv', header=TRUE, sep=";")
attach(vendaProdutosDataSet)
train.vendaProdutosDataSet = vendaProdutosDataSet[1:1000, c("venda")]
dmydata <- discretize(train.vendaProdutosDataSet, breaks = 2, method = "interval")
View(vendaProdutosDataSet)
train.vendaProdutosDataSet = vendaProdutosDataSet[1:1000, c("quantidade","venda")]
dmydata <- discretize(train.vendaProdutosDataSet, breaks = 2, method = "interval")
View(dmydata)
dmydata <- discretize(train.vendaProdutosDataSet, breaks = 2, method = "quantile")
View(dmydata)
View(train.vendaProdutosDataSet)
dmydata <- discretize(train.vendaProdutosDataSet, breaks = 2, method = "hartemink")
dmydata <- discretize(train.vendaProdutosDataSet,
breaks = 3,
ibreaks=60, idisc="quantile", method = "hartemink")
library(bnlearn)
library(Rgraphviz)
data(gaussian.test)
d = discretize(gaussian.test, method = 'hartemink', breaks = 4, ibreaks = 20)
plot(hc(d))
d2 = dedup(gaussian.test)
View(d)
library(bnlearn)
library(Rgraphviz)
vendaProdutosDataSet = read.table('vendaProdutos.csv', header=TRUE, sep=";")
attach(vendaProdutosDataSet)
train.vendaProdutosDataSet = vendaProdutosDataSet[1:1000, c("quantidade","venda")]
dmydata <- discretize(train.vendaProdutosDataSet, method = 'hartemink', breaks = 4, ibreaks = 20)
View(d2)
library(bnlearn)
library(Rgraphviz)
vendaProdutosDataSet = read.table('vendaProdutos.csv', header=TRUE, sep=";")
attach(vendaProdutosDataSet)
train.vendaProdutosDataSet = vendaProdutosDataSet[1:10, c("quantidade","venda")]
dadosDiscretizados <- discretize(train.vendaProdutosDataSet, breaks = 2, method = "quantile")
library(bnlearn)
library(Rgraphviz)
vendaProdutosDataSet = read.table('vendaProdutos.csv', header=TRUE, sep=";")
attach(vendaProdutosDataSet)
train.vendaProdutosDataSet = vendaProdutosDataSet[1:10, c("quantidade","venda")]
dadosDiscretizados <- discretize(train.vendaProdutosDataSet, breaks = 2, method = "quantile")
View(dadosDiscretizados)
dedup(dadosDiscretizados)
dadosDiscretizados <-discretize(train.vendaProdutosDataSet, method = 'hartemink', breaks = 4, ibreaks = 20)
dadosDiscretizados <-discretize(train.vendaProdutosDataSet, method = 'hartemink', breaks = 4, ibreaks = 20)
dadosDiscretizados <-discretize(train.vendaProdutosDataSet, method = 'hartemink', breaks = 4, ibreaks = 20)
train.vendaProdutosDataSet = vendaProdutosDataSet[1:100, c("quantidade","venda")]
dadosDiscretizados <-discretize(train.vendaProdutosDataSet, method = 'hartemink', breaks = 4, ibreaks = 20)
dadosDiscretizados <- discretize(train.vendaProdutosDataSet, breaks = 2, method = "interval")
dedup(dadosDiscretizados)
View(train.vendaProdutosDataSet)
View(dadosDiscretizados)
dedup(dadosDiscretizados)
View(dadosDiscretizados)
train.vendaProdutosDataSet = vendaProdutosDataSet[1:100, c("quantidade","venda")]
dadosDiscretizados <- discretize(train.vendaProdutosDataSet, breaks = 2, method = "interval")
#dadosDiscretizados <-discretize(train.vendaProdutosDataSet, method = 'hartemink', breaks = 4, ibreaks = 20)
View(dadosDiscretizados)
library(bnlearn)
library(Rgraphviz)
data(gaussian.test)
d = discretize(gaussian.test, method = 'hartemink', breaks = 4, initial.breaks = 20)
plot(hc(d))
dedup(d)
dedup(d)
View(d)
train.vendaProdutosDataSet = vendaProdutosDataSet[1:100, c("quantidade","venda")]
dadosDiscretizados <- discretize(train.vendaProdutosDataSet, breaks = 2, method = "interval")
dadosDiscretizados$quantidade = as.numeric(dadosDiscretizados$quantidade)
dadosDiscretizados$venda = as.numeric(dadosDiscretizados$venda)
dedup(dadosDiscretizados)
deducaoDados <- dedup(dadosDiscretizados)
View(dadosDiscretizados)
dadosDiscretizados <- discretize(train.vendaProdutosDataSet, breaks = 2, method = "interval")
View(dadosDiscretizados)
train.vendaProdutosDataSet = vendaProdutosDataSet[1:100, c("quantidade","venda")]
View(train.vendaProdutosDataSet)
View(dadosDiscretizados)
dadosDiscretizados$quantidade = as.numeric(dadosDiscretizados$quantidade)
dadosDiscretizados$venda = as.numeric(dadosDiscretizados$venda)
View(dadosDiscretizados)
library(arules)
data(iris)
x <- iris[,4]
hist(x, breaks=20, main="Data")
def.par <- par(no.readonly = TRUE) # save default
layout(mat=rbind(1:2,3:4))
### convert continuous variables into categories (there are 3 types of flowers)
### default is equal interval width
table(discretize(x, categories=3))
hist(x, breaks=20, main="Equal Interval length")
abline(v=discretize(x, categories=3, onlycuts=TRUE),
col="red")
library(arules)
data(iris)
x <- iris[,4]
hist(x, breaks=20, main="Data")
def.par <- par(no.readonly = TRUE) # save default
layout(mat=rbind(1:2,3:4))
table(discretize(x, categories=3))
library(bnlearn)
library(Rgraphviz)
library(arules)
vendaProdutosDataSet = read.table('vendaProdutos.csv', header=TRUE, sep=";")
attach(vendaProdutosDataSet)
train.vendaProdutosDataSet = vendaProdutosDataSet[1:100, c("quantidade","venda")]
x <- train.vendaProdutosDataSet$venda
hist(x, breaks=20, main="Data")
table(discretize(x, categories=3))
table(discretize(x, "cluster", categories=3))
hist(x, breaks=20, main="K-Means")
abline(v=discretize(x, method="cluster", categories=3, onlycuts=TRUE),
col="red")
table(discretize(x, "cluster", categories=3))
hist(x, breaks=20, main="K-Means")
abline(v=discretize(x, method="cluster", categories=3, onlycuts=TRUE),
col="red")
View(train.vendaProdutosDataSet)
table(discretize(x, "cluster", categories = c('A','B','C')))
hist(x, breaks=20, main="K-Means")
abline(v=discretize(x, method="cluster", categories=3, onlycuts=TRUE),
col="red")
table(discretize(x, "cluster", categories = c('A','B','C')))
table(discretize(x, "cluster", categories = 3))
table(discretize(x, "fixed", categories = c('A','B','C')))
table(discretize(x, "fixed", categories = c(-Inf,.8, Inf),
labels=c("small", "large")))
table(discretize(x, "fixed", categories = c('A','B','C')))
table(discretize(x, categories=3))
hist(x, breaks=20, main="Equal Interval length")
abline(v=discretize(x, categories=3, onlycuts=TRUE),
col="red")
table(discretize(x, "cluster", categories=3))
table(discretize(x, "cluster", categories=3))
vendaDiscretize <- discretize(x, "cluster", categories=3)
trans <- as(vendaDiscretize, "transactions")
inspect(head(trans, 1))
vendaDiscretize <- discretize(x, "cluster", categories=3)
trans <- as(vendaDiscretize, "transactions")
vendaDiscretize <- discretize(x, "cluster", categories=3)
trans <- as(vendaDiscretize, "quantidade")
vendaDiscretize <- discretize(x, "cluster", categories=3)
trans <- as(vendaDiscretize, "quantidade")
inspect(head(trans, 1))
vendaDiscretize <- discretize(x, "cluster", categories=3)
vendaDiscretize
table(vendaDiscretize)
dsachs <- discretize(train.vendaProdutosDataSet, method = "hartemink", breaks = 3,
ibreaks = 60, idisc = "quantile")
dsachs <- discretize(train.vendaProdutosDataSet, method = "hartemink", breaks = 3,
ibreaks = 60, idisc = "quantile")
dsachs <- discretize(train.vendaProdutosDataSet, method = "hartemink", breaks = 3,
ibreaks = 60, idisc = "quantile")
detach("package:arules", unload=TRUE)
dsachs <- discretize(train.vendaProdutosDataSet, method = "hartemink", breaks = 3,
ibreaks = 60, idisc = "quantile")
library(bnlearn)
library(Rgraphviz)
vendaProdutosDataSet = read.table('vendaProdutos.csv', header=TRUE, sep=";")
attach(vendaProdutosDataSet)
train.vendaProdutosDataSet = vendaProdutosDataSet[1:100, c("quantidade","venda")]
dsachs <- discretize(train.vendaProdutosDataSet, method = "hartemink", breaks = 3,
ibreaks = 60, idisc = "quantile")
dsachs <- discretize(train.vendaProdutosDataSet, method = "hartemink", breaks = 3,
ibreaks = 10, idisc = "quantile")
## venda - distribuicao
hist(train.vendaProdutosDataSet$venda)
## venda - distribuicao
hist(train.vendaProdutosDataSet$venda)
ntrain.vendaProdutosDataSet <- asinh(train.vendaProdutosDataSet$venda)
## assess distribution of data
hist(ntrain.vendaProdutosDataSet)
train.vendaProdutosDataSet = vendaProdutosDataSet[1:100, c("quantidade","venda")]
## venda - distribuicao
hist(train.vendaProdutosDataSet)
train.vendaProdutosDataSet = vendaProdutosDataSet[1:100, c("quantidade","venda")]
## venda - distribuicao
hist(train.vendaProdutosDataSet)
train.vendaProdutosDataSet = vendaProdutosDataSet[1:100, c("quantidade","venda")]
## venda - distribuicao
hist(train.vendaProdutosDataSet$venda)
dsachs <- discretize(ntrain.vendaProdutosDataSet, method = "hartemink", breaks = 3,
ibreaks = 10, idisc = "quantile")
hist(ntrain.vendaProdutosDataSet)
ntrain.vendaProdutosDataSet <- as.data.frame(ntrain.vendaProdutosDataSet)
View(ntrain.vendaProdutosDataSet)
dsachs <- discretize(ntrain.vendaProdutosDataSet, method = "hartemink", breaks = 3,
ibreaks = 10, idisc = "quantile")
dsachs <- discretize(ntrain.vendaProdutosDataSet, method = "hartemink", breaks = 3,
ibreaks = 60, idisc = "quantile")
dsachs <- discretize(ntrain.vendaProdutosDataSet, method = "hartemink", breaks = 3,
ibreaks = 60, idisc = "quantile")
View(vendaProdutosDataSet)
