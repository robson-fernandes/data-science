var(dataOxigenio)
summary(dataOxigenio)
var(dataOxigenio$tempo)
var(dataOxigenio$oxigenio)
sd(dataOxigenio$tempo)
sd(dataOxigenio$oxigenio)
summary(dataOxigenio)
var(dataOxigenio$tempo)
var(dataOxigenio$oxigenio)
sd(dataOxigenio$tempo)
sd(dataOxigenio$oxigenio)
dataOxigenio = read.table('/Users/robsonfernandes/Desktop/regressao/oxigenio.txt',header=T)
attach(dataOxigenio)
#Estatística Descritiva
summary(dataOxigenio)
var(dataOxigenio$tempo)
var(dataOxigenio$oxigenio)
sd(dataOxigenio$tempo)
sd(dataOxigenio$oxigenio)
#Teste de correlao - Coeficiente de correlacao de Pearson
cor.test(dataOxigenio$tempo,dataOxigenio$oxigenio)
#----------------------------------------
# DIAGRAMA DE DISPERSAO
#----------------------------------------
plot(tempo,oxigenio,xlab="Tempo",ylab="Oxigenio")
points(mean(tempo), mean(oxigenio),col="red",lwd=5,lty=9)
#----------------------------------------
# AJUSTE NO MODELO
#----------------------------------------
#Modelo Ajustado
modelo = lm(tempo ~ oxigenio)
modelo
summary(modelo)
#----------------------------------------
# ANALISE DO MODELO DE REGRESSAO
#----------------------------------------
predict(modelo)  # valores preditos pela equacao de regressao
residuals(modelo) # valores residuos
#Verificando Normalidade dos residuos
shapiro.test(residuals(modelo))
#----------------------------------------
#ANALISE DE RESIDUOS
#----------------------------------------
plot(fitted(modelo),residuals(modelo),xlab="Valores Ajustados",ylab="Residuos")
abline(h=0)
plot(tempo,residuals(modelo),xlab="tempo",ylab="Residuos")
abline(h=0)
qqnorm(residuals(modelo), ylab="Residuos")
qqline(residuals(modelo))
#----------------------------------------
#----------------------------------------
# GRAFICO DE REGRESAO
#----------------------------------------
plot(tempo ~ oxigenio)
abline(modelo, col=2, lty=2, lwd=2)
legend("top", legend=c("valores observados", "valores ajustados"), lty=c(NA,2), col=c(1,2), lwd=1:2, bty="n", pch=c(1,NA))
dataOxigenio = read.table('/Users/robsonfernandes/Desktop/regressao/oxigenio.txt',header=T)
attach(dataOxigenio)
modelo = lm(tempo ~ oxigenio)
modelo
#----------------------------------------
# Robson Fernandes da Silva <robson.fernandes@usp.br>
# N. USP - 10107495
# Trabalho - Regressão Linear
#----------------------------------------
dataOxigenio = read.table('/Users/robsonfernandes/Desktop/regressao/oxigenio.txt',header=T)
attach(dataOxigenio)
#----------------------------------------
# ESTATISTICA DESCRITIVA
#----------------------------------------
summary(dataOxigenio)
var(dataOxigenio$tempo)
var(dataOxigenio$oxigenio)
sd(dataOxigenio$tempo)
sd(dataOxigenio$oxigenio)
#Teste de correlao - Coeficiente de correlacao de Pearson
cor.test(dataOxigenio$tempo,dataOxigenio$oxigenio)
#----------------------------------------
# DIAGRAMA DE DISPERSAO
#----------------------------------------
plot(tempo,oxigenio,xlab="Tempo",ylab="Oxigenio")
points(mean(tempo), mean(oxigenio),col="red",lwd=5,lty=9)
#----------------------------------------
# AJUSTE NO MODELO
#----------------------------------------
#Modelo Ajustado
modelo = lm(tempo ~ oxigenio)
modelo
summary(modelo)
#----------------------------------------
# ANALISE DO MODELO DE REGRESSAO
#----------------------------------------
predict(modelo)  # valores preditos pela equacao de regressao
residuals(modelo) # valores residuos
#Verificando Normalidade dos residuos
shapiro.test(residuals(modelo))
#----------------------------------------
#ANALISE DE RESIDUOS
#----------------------------------------
plot(fitted(modelo),residuals(modelo),xlab="Valores Ajustados",ylab="Residuos")
abline(h=0)
plot(tempo,residuals(modelo),xlab="tempo",ylab="Residuos")
abline(h=0)
qqnorm(residuals(modelo), ylab="Residuos")
qqline(residuals(modelo))
#----------------------------------------
#----------------------------------------
# GRAFICO DE REGRESAO
#----------------------------------------
plot(tempo ~ oxigenio)
abline(modelo, col=2, lty=2, lwd=2)
legend("top", legend=c("valores observados", "valores ajustados"), lty=c(NA,2), col=c(1,2), lwd=1:2, bty="n", pch=c(1,NA))
install.packages("plotly")
library(plotly)
p <- plot_ly(x = ~rnorm(50), type = "histogram")
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = plotly_POST(p, filename="histogram/1")
chart_link
library(plotly)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = ~carat, y = ~price, color = ~carat,
size = ~carat, text = ~paste("Clarity: ", clarity))
alligator = data.frame(
lnLength = c(3.87, 3.61, 4.33, 3.43, 3.81, 3.83, 3.46, 3.76,
3.50, 3.58, 4.19, 3.78, 3.71, 3.73, 3.78),
lnWeight = c(4.87, 3.93, 6.46, 3.33, 4.38, 4.70, 3.50, 4.50,
3.58, 3.64, 5.90, 4.43, 4.38, 4.42, 4.25)
)
xyplot(lnWeight ~ lnLength, data = alligator,
xlab = "Snout vent length (inches) on log scale",
ylab = "Weight (pounds) on log scale",
main = "Alligators in Central Florida"
)
library(plotly)
alligator = data.frame(
lnLength = c(3.87, 3.61, 4.33, 3.43, 3.81, 3.83, 3.46, 3.76,
3.50, 3.58, 4.19, 3.78, 3.71, 3.73, 3.78),
lnWeight = c(4.87, 3.93, 6.46, 3.33, 4.38, 4.70, 3.50, 4.50,
3.58, 3.64, 5.90, 4.43, 4.38, 4.42, 4.25)
)
plot_ly(lnWeight ~ lnLength, data = alligator,
xlab = "Snout vent length (inches) on log scale",
ylab = "Weight (pounds) on log scale",
main = "Alligators in Central Florida"
)
library(plotly)
alligator = data.frame(
lnLength = c(3.87, 3.61, 4.33, 3.43, 3.81, 3.83, 3.46, 3.76,
3.50, 3.58, 4.19, 3.78, 3.71, 3.73, 3.78),
lnWeight = c(4.87, 3.93, 6.46, 3.33, 4.38, 4.70, 3.50, 4.50,
3.58, 3.64, 5.90, 4.43, 4.38, 4.42, 4.25)
)
plot_ly(lnWeight ~ lnLength, data = alligator,
xlab = "Snout vent length (inches) on log scale",
ylab = "Weight (pounds) on log scale",
main = "Alligators in Central Florida"
)
library(plotly)
alligator = data.frame(
lnLength = c(3.87, 3.61, 4.33, 3.43, 3.81, 3.83, 3.46, 3.76,
3.50, 3.58, 4.19, 3.78, 3.71, 3.73, 3.78),
lnWeight = c(4.87, 3.93, 6.46, 3.33, 4.38, 4.70, 3.50, 4.50,
3.58, 3.64, 5.90, 4.43, 4.38, 4.42, 4.25)
)
p <- plot_ly(data = alligator, x = ~lnWeight, y = ~lnLength)
chart_link = plotly_POST(p, filename="scatter/basic")
chart_link
library(plotly)
alligator = data.frame(
lnLength = c(3.87, 3.61, 4.33, 3.43, 3.81, 3.83, 3.46, 3.76,
3.50, 3.58, 4.19, 3.78, 3.71, 3.73, 3.78),
lnWeight = c(4.87, 3.93, 6.46, 3.33, 4.38, 4.70, 3.50, 4.50,
3.58, 3.64, 5.90, 4.43, 4.38, 4.42, 4.25)
)
p <- plot_ly(data = alligator, x = ~lnWeight, y = ~lnLength)
chart_link = plotly_POST(p, filename="scatter/basic")
chart_link
library(plotly)
alligator = data.frame(
lnLength = c(3.87, 3.61, 4.33, 3.43, 3.81, 3.83, 3.46, 3.76,
3.50, 3.58, 4.19, 3.78, 3.71, 3.73, 3.78),
lnWeight = c(4.87, 3.93, 6.46, 3.33, 4.38, 4.70, 3.50, 4.50,
3.58, 3.64, 5.90, 4.43, 4.38, 4.42, 4.25)
)
p <- plot_ly(data = alligator, x = ~lnWeight, y = ~lnLength)
chart_link = plotly_POST(p, filename="scatter/basic")
library(plotly)
alligator = data.frame(
lnLength = c(3.87, 3.61, 4.33, 3.43, 3.81, 3.83, 3.46, 3.76,
3.50, 3.58, 4.19, 3.78, 3.71, 3.73, 3.78),
lnWeight = c(4.87, 3.93, 6.46, 3.33, 4.38, 4.70, 3.50, 4.50,
3.58, 3.64, 5.90, 4.43, 4.38, 4.42, 4.25)
)
p <- plot_ly(data = alligator, x = ~lnWeight, y = ~lnLength)
chart_link = plotly_POST(p)
chart_link
library(plotly)
p <- plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length, color = ~Species)
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = plotly_POST(p, filename="scatter/color")
chart_link
Y1<-plnorm(tempo, meanlog = betas%*%covariaveis, sdlog = 1.24, log = FALSE)
##Tempo de interesse
tempo<-seq(0,200,1)
covariaveis1<-c(1,0,0,0,1,0,1,0)
betas<-c(2.2619,2.2783,1.8414,1.5244,0.2614,-0.0836,0.1251,-0.0197)
Y1<-plnorm(tempo, meanlog = betas%*%covariaveis, sdlog = 1.24, log = FALSE)
##Tempo de interesse
tempo<-seq(0,200,1)
covariaveis1<-c(1,0,0,0,1,0,1,0)
betas<-c(2.2619,2.2783,1.8414,1.5244,0.2614,-0.0836,0.1251,-0.0197)
Y1<-plnorm(tempo, meanlog = betas%*%covariaveis, sdlog = 1.24, log = FALSE)
Y1
##Tempo de interesse
tempo<-seq(0,200,1)
##Tempo de interesse
tempo<-seq(0,200,1)
covariaveis1<-c(1,0,0,0,1,0,1,0)
betas<-c(2.2619,2.2783,1.8414,1.5244,0.2614,-0.0836,0.1251,-0.0197)
plnorm(tempo, meanlog = betas%*%covariaveis, sdlog = 1.24, log = FALSE)
##Tempo de interesse
tempo<-seq(0,200,1)
covariaveis1<-c(1,0,0,0,1,0,1,0)
betas<-c(2.2619,2.2783,1.8414,1.5244,0.2614,-0.0836,0.1251,-0.0197)
Y1<-plnorm(tempo, meanlog = betas%*%covariaveis1, sdlog = 1.24, log = FALSE)
Y1
##Tempo de interesse
tempo<-seq(0,200,1)
covariaveis1<-c(1,0,0,0,1,0,1,0)
betas<-c(2.2619,2.2783,1.8414,1.5244,0.2614,-0.0836,0.1251,-0.0197)
Y1<-plnorm(tempo, meanlog = betas%*%covariaveis1, sdlog = 1.24, log = FALSE)
summary(Y1)
##Tempo de interesse
tempo<-seq(0,200,1)
covariaveis1<-c(1,0,0,0,1,0,1,0)
betas<-c(2.2619,2.2783,1.8414,1.5244,0.2614,-0.0836,0.1251,-0.0197)
Y1<-plnorm(tempo, meanlog = betas%*%covariaveis1, sdlog = 1.24, log = FALSE)
mean(Y1)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
plot(res)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- gs(bn_df)
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- mmhc(bn_df)
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
library(bnlearn)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
plot(res)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
res$arcs
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
res$arcs
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
res$arcs
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
res$arcs
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
fittedbn <- bn.fit(res, data = bn_df)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
fittedbn <- bn.fit(res, data = bn_df)
cpquery(fittedbn, event = (Proteins=="<3"), evidence = ( Smoking=="no") )
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
fittedbn <- bn.fit(res, data = bn_df)
cpquery(fittedbn, event = (Proteins=="<3"), evidence = ( Smoking=="no") )
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
fittedbn <- bn.fit(res, data = bn_df)
cpquery(fittedbn, event = (Proteins=="<3"), evidence = ( Smoking=="no") )
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
fittedbn <- bn.fit(res, data = bn_df)
cpquery(fittedbn, event = (Proteins=="<3"), evidence = ( Smoking=="no") )
library(e1071)
duration = c(1,3,5,6,8,10,15)
kurtosis(duration)
var(duration)
moment(c)
library(e1071)
c = c(1,3,5,6,8,10,15)
moment(c)
sd(c)
sd(c)
moment(c)
sd(c)
sd(c)^4
library(e1071)
c = c(1,3,5,6,8,10,15)
desvioPadrao = sd(c)
variancia  = var(c)
k = 1
momento1 = desvioPadrao^k / variancia^k
library(e1071)
c = c(1,3,5,6,8,10,15)
desvioPadrao = sd(c)
variancia  = var(c)
k = 1
momento1 = desvioPadrao^k / variancia^k
library(e1071)
c = c(1,3,5,6,8,10,15)
desvioPadrao = sd(c)
variancia  = var(c)
k = 1
momento1 = desvioPadrao^k / variancia^k
momento1
moment(c)
library(e1071)
c = c(1,3,5,6,8,10,15)
desvioPadrao = sd(c)
variancia  = var(c)
k = 1
momento1 = desvioPadrao^k / variancia^k
momento1
moment(c)
moment(c, order=1, center=TRUE)
k = 1
momento1 = desvioPadrao^k / variancia^k
momento1
moment(c, order=1, center=TRUE)
moment(c, order=1)
moment(c, order=2)
k = 2
momento1 = desvioPadrao^k / variancia^k
momento1
mean(c)
moment(c, order=1)
desvioPadrao = sd(c)
variancia  = var(c)
moment(c, order=1)
moment(c, order=4)
kurtosis(c)
skewness(c)
moment(c, order=2)
moment(c, order=1)
moment(c, order=2)
moment(c)
moment(c)
moment(c)
moment(c, order=1,center = TRUE)
moment(c, order=2,center = TRUE)
moment(c, order=2,center = TRUE)
variancia  = var(c)
variancia  = var(c)
variancia
moment(c, order=2,center = TRUE)
moment(c, order=3,center = TRUE)
moment(c, order=1,center = TRUE)
-12.428 + 12.429
-12.428 + 12.429 / 6
(-12.428 + 12.429) / 6
moment(c, order=1,center = TRUE)
(-12.428 + 12.429) / 6
moment(c, order=2,center = TRUE)
k = 2
momento1 =  variancia^k / desvioPadrao^k
momento1
k = 1
momento1 =  variancia^k / desvioPadrao^k
momento1
k = 1
momento1 =  variancia^k / desvioPadrao^k
momento1
k = 2
momento1 =  variancia^k / desvioPadrao^k
momento1
require("bnlearn")
setwd("~/Documents/projetos/data-science/inferenciaBayesiana/coronary")
#Coleta da Base de Dados Coronary
coronaryDataFrame <- data.frame(coronary)
#Aprendizagem da rede bayesiana usando algoritmo Hill-Climbing (HC)
res <- hc(coronaryDataFrame)
res <- drop.arc(res, "M..Work", "Family")
#Plot da Rede
plot(res)
bnAjustado <- bn.fit(res, data = coronaryDataFrame)
print(bnAjustado$Proteins)
require("bnlearn")
setwd("~/Documents/projetos/data-science/inferenciaBayesiana/coronary")
#Coleta da Base de Dados Coronary
coronaryDataFrame <- data.frame(coronary)
#Aprendizagem da rede bayesiana usando algoritmo Hill-Climbing (HC)
res <- hc(coronaryDataFrame)
#res <- drop.arc(res, "M..Work", "Family")
#Plot da Rede
plot(res)
require("bnlearn")
setwd("~/Documents/projetos/data-science/inferenciaBayesiana/coronary")
#Coleta da Base de Dados Coronary
coronaryDataFrame <- data.frame(coronary)
#Aprendizagem da rede bayesiana usando algoritmo Hill-Climbing (HC)
res <- hc(coronaryDataFrame)
#res <- drop.arc(res, "M..Work", "Family")
#Plot da Rede
plot(res)
require("bnlearn")
setwd("~/Documents/projetos/data-science/inferenciaBayesiana/coronary")
#Coleta da Base de Dados Coronary
coronaryDataFrame <- data.frame(coronary)
#Aprendizagem da rede bayesiana usando algoritmo Hill-Climbing (HC)
res <- hc(coronaryDataFrame)
#res <- drop.arc(res, "M..Work", "Family")
#Plot da Rede
plot(res)
setwd("~/Documents/projetos/data-science/inferenciaBayesiana/coronary")
require("bnlearn")
#Coleta da Base de Dados Coronary
coronaryDataFrame <- data.frame(coronary)
#Aprendizagem da rede bayesiana usando algoritmo Hill-Climbing (HC)
res <- hc(coronaryDataFrame)
plot(res)
require("bnlearn")
#Coleta da Base de Dados Coronary
coronaryDataFrame <- data.frame(coronary)
#Aprendizagem da rede bayesiana usando algoritmo Hill-Climbing (HC)
res <- hc(coronaryDataFrame)
#Plot da Rede
plot(res)
#Remover o Link entre as nós "M..Work", "Family"
res <- drop.arc(res, "M..Work", "Family")
#Plot da Rede
plot(res)
bnAjustado <- bn.fit(res, data = coronaryDataFrame)
print(bnAjustado$Proteins)
bnAjustado <- bn.fit(res, data = coronaryDataFrame)
print(bnAjustado$Pressure)
print(bnAjustado$Pressure)
cpquery(fittedbn,
event = (Proteins=="<3"),
evidence = ( Smoking=="no" & Pressure==">140" ) )
cpquery(bnAjustado,
event = (Proteins=="<3"),
evidence = ( Smoking=="no" & Pressure==">140" ) )
cpquery(bnAjustado,
event = (Proteins=="<3"),
evidence = ( Smoking=="no" & Pressure==">140" ) )
View(coronaryDataFrame)
View(coronaryDataFrame)
cpquery(bnAjustado,
event = (Proteins=="<3"),
evidence = ( Smoking=="no" & Pressure==">140" ) )
