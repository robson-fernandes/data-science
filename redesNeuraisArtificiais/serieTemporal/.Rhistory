plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
plot(res)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
res$arcs
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
res$arcs
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
res$arcs
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
res$arcs
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
fittedbn <- bn.fit(res, data = bn_df)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
fittedbn <- bn.fit(res, data = bn_df)
cpquery(fittedbn, event = (Proteins=="<3"), evidence = ( Smoking=="no") )
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
fittedbn <- bn.fit(res, data = bn_df)
cpquery(fittedbn, event = (Proteins=="<3"), evidence = ( Smoking=="no") )
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
fittedbn <- bn.fit(res, data = bn_df)
cpquery(fittedbn, event = (Proteins=="<3"), evidence = ( Smoking=="no") )
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
fittedbn <- bn.fit(res, data = bn_df)
cpquery(fittedbn, event = (Proteins=="<3"), evidence = ( Smoking=="no") )
library(e1071)
duration = c(1,3,5,6,8,10,15)
kurtosis(duration)
var(duration)
moment(c)
library(e1071)
c = c(1,3,5,6,8,10,15)
moment(c)
sd(c)
sd(c)
moment(c)
sd(c)
sd(c)^4
library(e1071)
c = c(1,3,5,6,8,10,15)
desvioPadrao = sd(c)
variancia  = var(c)
k = 1
momento1 = desvioPadrao^k / variancia^k
library(e1071)
c = c(1,3,5,6,8,10,15)
desvioPadrao = sd(c)
variancia  = var(c)
k = 1
momento1 = desvioPadrao^k / variancia^k
library(e1071)
c = c(1,3,5,6,8,10,15)
desvioPadrao = sd(c)
variancia  = var(c)
k = 1
momento1 = desvioPadrao^k / variancia^k
momento1
moment(c)
library(e1071)
c = c(1,3,5,6,8,10,15)
desvioPadrao = sd(c)
variancia  = var(c)
k = 1
momento1 = desvioPadrao^k / variancia^k
momento1
moment(c)
moment(c, order=1, center=TRUE)
k = 1
momento1 = desvioPadrao^k / variancia^k
momento1
moment(c, order=1, center=TRUE)
moment(c, order=1)
moment(c, order=2)
k = 2
momento1 = desvioPadrao^k / variancia^k
momento1
mean(c)
moment(c, order=1)
desvioPadrao = sd(c)
variancia  = var(c)
moment(c, order=1)
moment(c, order=4)
kurtosis(c)
skewness(c)
moment(c, order=2)
moment(c, order=1)
moment(c, order=2)
moment(c)
moment(c)
moment(c)
moment(c, order=1,center = TRUE)
moment(c, order=2,center = TRUE)
moment(c, order=2,center = TRUE)
variancia  = var(c)
variancia  = var(c)
variancia
moment(c, order=2,center = TRUE)
moment(c, order=3,center = TRUE)
moment(c, order=1,center = TRUE)
-12.428 + 12.429
-12.428 + 12.429 / 6
(-12.428 + 12.429) / 6
moment(c, order=1,center = TRUE)
(-12.428 + 12.429) / 6
moment(c, order=2,center = TRUE)
k = 2
momento1 =  variancia^k / desvioPadrao^k
momento1
k = 1
momento1 =  variancia^k / desvioPadrao^k
momento1
k = 1
momento1 =  variancia^k / desvioPadrao^k
momento1
k = 2
momento1 =  variancia^k / desvioPadrao^k
momento1
library(bnlearn)
library(Rgraphviz)
vendaProdutosDataSet = read.table('vendaProdutos.csv', header=TRUE, sep=";")
attach(vendaProdutosDataSet)
#Modelo da Rede Bayesiana
dag <- model2network("[codProduto][codGrupoVenda|codProduto][quantidadeIntervalo|codGrupoVenda][vendaIntervalo|quantidadeIntervalo:codGrupoVenda][desDiaSemana|vendaIntervalo]")
plot(dag)
install.packages("nnetar")
setwd("~/Documents/projetos/data-science/redesNeuraisArtificiais/serieTemporal")
setwd("~/Documents/projetos/data-science/redesNeuraisArtificiais/serieTemporal")
library("nnetar")
library(dplyr)
#Leitura do Arquivo vendas.txt
vendasDataSet = read.table('serieVendas.csv', header=TRUE, sep=";")
vendasDataSet$venda<- as.numeric(vendasDataSet$venda)
#Conversion Data
vendasDataSet$data<- as.Date(vendasDataSet$data)
vendasDataSet$venda<- as.numeric(vendasDataSet$venda)
#Filter DataSet
vendasTreinamento <- vendasDataSet %>%
select(data,venda) %>%
filter(data >= as.Date("2010-01-01") & data <= as.Date("2015-12-01"))
#Serie Temporal
serieTemporal <- ts(vendasTreinamento$venda, start=c(2010, 1), end=c(2015, 12), frequency=12)
fit <- nnetar(serieTemporal)
library(forecast)
library(dplyr)
#Leitura do Arquivo vendas.txt
vendasDataSet = read.table('serieVendas.csv', header=TRUE, sep=";")
vendasDataSet$venda<- as.numeric(vendasDataSet$venda)
#Conversion Data
vendasDataSet$data<- as.Date(vendasDataSet$data)
vendasDataSet$venda<- as.numeric(vendasDataSet$venda)
#Filter DataSet
vendasTreinamento <- vendasDataSet %>%
select(data,venda) %>%
filter(data >= as.Date("2010-01-01") & data <= as.Date("2015-12-01"))
#Serie Temporal
serieTemporal <- ts(vendasTreinamento$venda, start=c(2010, 1), end=c(2015, 12), frequency=12)
fit <- nnetar(serieTemporal)
plot(fit)
fit <- nnetar(serieTemporal)
fit <- nnetar(serieTemporal, decay=0.5, maxit=150)
plot(forecast(fit))
lines(serieTemporal)
forecast(fit)
forecast(fit, 6)
fit
accuracy(fit)
forecast(fit, 6)
vendasTeste <- vendasDataSet %>%
select(data,venda) %>%
filter(data >= as.Date("2016-01-01") & data <= as.Date("2016-12-01"))
serieTemporalTeste <- ts(vendasTeste$venda, start=c(2016, 1), end=c(2016, 12), frequency=12)
fit2 <- nnetar(serieTemporalTeste, model=fit)
plot(forecast(fit2))
#Neural Network Time Series Forecasts
fit <- nnetar(serieTemporal, decay=0.5, maxit=150)
plot(forecast(fit))
lines(serieTemporal)
accuracy(fit)
forecast(fit, 6)
## Apply fitted model to later data, including all optional arguments
fit2 <- nnetar(serieTemporalTeste, model=fit)
plot(forecast(fit2))
fit2 <- nnetar(serieTemporalTeste, model=fit)
fit2 <- nnetar(serieTemporalTeste, model=fit)
serieTemporalTeste <- ts(vendasTeste$venda, start=c(2016, 1), end=c(2016, 12), frequency=12)
fit2 <- nnetar(serieTemporalTeste, decay=0.5, maxit=150, model=fit)
fit <- nnetar(serieTemporal, decay=0.5, maxit=150)
library(forecast)
library(dplyr)
#Leitura do Arquivo vendas.txt
vendasDataSet = read.table('serieVendas.csv', header=TRUE, sep=";")
vendasDataSet$venda<- as.numeric(vendasDataSet$venda)
#Conversion Data
vendasDataSet$data<- as.Date(vendasDataSet$data)
vendasDataSet$venda<- as.numeric(vendasDataSet$venda)
#Filter DataSet
vendasTreinamento <- vendasDataSet %>%
select(data,venda) %>%
filter(data >= as.Date("2010-01-01") & data <= as.Date("2015-12-01"))
vendasTeste <- vendasDataSet %>%
select(data,venda) %>%
filter(data >= as.Date("2016-01-01") & data <= as.Date("2016-12-01"))
#Serie Temporal
serieTemporal <- ts(vendasTreinamento$venda, start=c(2010, 1), end=c(2015, 12), frequency=12)
serieTemporalTeste <- ts(vendasTeste$venda, start=c(2016, 1), end=c(2016, 12), frequency=12)
#Neural Network Time Series Forecasts
fit <- nnetar(serieTemporal, decay=0.5, maxit=150)
plot(forecast(fit))
lines(serieTemporal)
accuracy(fit)
forecast(fit, 6)
install.packages("rnn")
# Clear workspace
rm(list=ls())
# Load libraries
require(rnn)
# Set seed for reproducibility purposes
set.seed(10)
# Set frequency
f <- 5
w <- 2*pi*f
# Create sequences
t <- seq(0.005,2,by=0.005)
x <- sin(t*w) + rnorm(200, 0, 0.25)
y <- cos(t*w)
# Samples of 20 time series
X <- matrix(x, nrow = 40)
Y <- matrix(y, nrow = 40)
# Plot noisy waves
plot(as.vector(X), col='blue', type='l', ylab = "X,Y", main = "Noisy waves")
lines(as.vector(Y), col = "red")
legend("topright", c("X", "Y"), col = c("blue","red"), lty = c(1,1), lwd = c(1,1))
# Standardize in the interval 0 - 1
X <- (X - min(X)) / (max(X) - min(X))
Y <- (Y - min(Y)) / (max(Y) - min(Y))
# Transpose
X <- t(X)
Y <- t(Y)
# Training-testing sets
train <- 1:8
test <- 9:10
# Train model. Keep out the last two sequences.
model <- trainr(Y = Y[train,],
X = X[train,],
learningrate = 0.05,
hidden_dim = 16,
numepochs = 1500)
# Clear workspace
rm(list=ls())
# Load libraries
require(rnn)
set.seed(10)
f <- 5
w <- 2*pi*f
t <- seq(0.005,2,by=0.005)
x <- sin(t*w) + rnorm(200, 0, 0.25)
y <- cos(t*w)
X <- matrix(x, nrow = 40)
Y <- matrix(y, nrow = 40)
View(X)
plot(as.vector(X), col='blue', type='l', ylab = "X,Y", main = "Noisy waves")
lines(as.vector(Y), col = "red")
legend("topright", c("X", "Y"), col = c("blue","red"), lty = c(1,1), lwd = c(1,1))
X <- (X - min(X)) / (max(X) - min(X))
Y <- (Y - min(Y)) / (max(Y) - min(Y))
X <- t(X)
Y <- t(Y)
train <- 1:8
test <- 9:10
model <- trainr(Y = Y[train,],
X = X[train,],
learningrate = 0.05,
hidden_dim = 16,
numepochs = 1500)
library(forecast)
library(dplyr)
#Leitura do Arquivo vendas.txt
vendasDataSet = read.table('serieVendas.csv', header=TRUE, sep=";")
vendasDataSet$venda<- as.numeric(vendasDataSet$venda)
#Conversion Data
vendasDataSet$data<- as.Date(vendasDataSet$data)
vendasDataSet$venda<- as.numeric(vendasDataSet$venda)
#Filter DataSet
vendasTreinamento <- vendasDataSet %>%
select(data,venda) %>%
filter(data >= as.Date("2010-01-01") & data <= as.Date("2015-12-01"))
vendasTeste <- vendasDataSet %>%
select(data,venda) %>%
filter(data >= as.Date("2016-01-01") & data <= as.Date("2016-12-01"))
#Serie Temporal
serieTemporal <- ts(vendasTreinamento$venda, start=c(2010, 1), end=c(2015, 12), frequency=12)
serieTemporalTeste <- ts(vendasTeste$venda, start=c(2016, 1), end=c(2016, 12), frequency=12)
#Neural Network Time Series Forecasts
fit <- nnetar(serieTemporal, decay=0.5, maxit=150)
plot(fit)
plot(forecast(fit))
lines(serieTemporal)
accuracy(fit)
forecast(fit, 6)
plot(fit)
fit$model
plot(fit$model)
library(forecast)
library(dplyr)
#Leitura do Arquivo vendas.txt
vendasDataSet = read.table('serieVendas.csv', header=TRUE, sep=";")
vendasDataSet$venda<- as.numeric(vendasDataSet$venda)
#Conversion Data
vendasDataSet$data<- as.Date(vendasDataSet$data)
vendasDataSet$venda<- as.numeric(vendasDataSet$venda)
#Filter DataSet
vendasTreinamento <- vendasDataSet %>%
select(data,venda) %>%
filter(data >= as.Date("2010-01-01") & data <= as.Date("2015-12-01"))
vendasTeste <- vendasDataSet %>%
select(data,venda) %>%
filter(data >= as.Date("2016-01-01") & data <= as.Date("2016-12-01"))
#Serie Temporal
serieTemporal <- ts(vendasTreinamento$venda, start=c(2010, 1), end=c(2015, 12), frequency=12)
serieTemporalTeste <- ts(vendasTeste$venda, start=c(2016, 1), end=c(2016, 12), frequency=12)
#Neural Network Time Series Forecasts
fit <- nnetar(serieTemporal, decay=0.5, maxit=150)
plot(forecast(fit))
lines(serieTemporal)
accuracy(fit)
forecast(fit, 6)
library(forecast)
library(dplyr)
#Leitura do Arquivo vendas.txt
vendasDataSet = read.table('serieVendas.csv', header=TRUE, sep=";")
vendasDataSet$venda<- as.numeric(vendasDataSet$venda)
#Conversion Data
vendasDataSet$data<- as.Date(vendasDataSet$data)
vendasDataSet$venda<- as.numeric(vendasDataSet$venda)
#Filter DataSet
vendasTreinamento <- vendasDataSet %>%
select(data,venda) %>%
filter(data >= as.Date("2010-01-01") & data <= as.Date("2015-12-01"))
vendasTeste <- vendasDataSet %>%
select(data,venda) %>%
filter(data >= as.Date("2016-01-01") & data <= as.Date("2016-12-01"))
#Serie Temporal
serieTemporal <- ts(vendasTreinamento$venda, start=c(2010, 1), end=c(2015, 12), frequency=12)
serieTemporalTeste <- ts(vendasTeste$venda, start=c(2016, 1), end=c(2016, 12), frequency=12)
#Neural Network Time Series Forecasts
fit <- nnetar(serieTemporal, decay=0.5, maxit=150, repeats = 20)
plot(forecast(fit))
lines(serieTemporal)
accuracy(fit)
forecast(fit, 6)
library(forecast)
library(dplyr)
#Leitura do Arquivo vendas.txt
vendasDataSet = read.table('serieVendas.csv', header=TRUE, sep=";")
vendasDataSet$venda<- as.numeric(vendasDataSet$venda)
#Conversion Data
vendasDataSet$data<- as.Date(vendasDataSet$data)
vendasDataSet$venda<- as.numeric(vendasDataSet$venda)
#Filter DataSet
vendasTreinamento <- vendasDataSet %>%
select(data,venda) %>%
filter(data >= as.Date("2010-01-01") & data <= as.Date("2015-12-01"))
vendasTeste <- vendasDataSet %>%
select(data,venda) %>%
filter(data >= as.Date("2016-01-01") & data <= as.Date("2016-12-01"))
#Serie Temporal
serieTemporal <- ts(vendasTreinamento$venda, start=c(2010, 1), end=c(2015, 12), frequency=12)
serieTemporalTeste <- ts(vendasTeste$venda, start=c(2016, 1), end=c(2016, 12), frequency=12)
#Neural Network Time Series Forecasts
fit <- nnetar(serieTemporal, decay=0.5, maxit=150, repeats = 20)
plot(forecast(fit))
lines(serieTemporal)
accuracy(fit)
forecast(fit, 6)
fit <- nnetar(serieTemporal, decay=0.5, maxit=150, repeats = 20)
library(forecast)
library(dplyr)
#Leitura do Arquivo vendas.txt
vendasDataSet = read.table('serieVendas.csv', header=TRUE, sep=";")
vendasDataSet$venda<- as.numeric(vendasDataSet$venda)
#Conversion Data
vendasDataSet$data<- as.Date(vendasDataSet$data)
vendasDataSet$venda<- as.numeric(vendasDataSet$venda)
#Filter DataSet
vendasTreinamento <- vendasDataSet %>%
select(data,venda) %>%
filter(data >= as.Date("2010-01-01") & data <= as.Date("2016-12-01"))
#Serie Temporal
serieTemporal <- ts(vendasTreinamento$venda, start=c(2010, 1), end=c(2015, 12), frequency=12)
#Neural Network Time Series Forecasts
fit <- nnetar(serieTemporal, decay=0.5, maxit=150, repeats = 20)
plot(forecast(fit))
lines(serieTemporal)
accuracy(fit)
forecast(fit, 6)
library(forecast)
library(dplyr)
#Leitura do Arquivo vendas.txt
vendasDataSet = read.table('serieVendas.csv', header=TRUE, sep=";")
vendasDataSet$venda<- as.numeric(vendasDataSet$venda)
#Conversion Data
vendasDataSet$data<- as.Date(vendasDataSet$data)
vendasDataSet$venda<- as.numeric(vendasDataSet$venda)
#Filter DataSet
vendasTreinamento <- vendasDataSet %>%
select(data,venda) %>%
filter(data >= as.Date("2010-01-01") & data <= as.Date("2016-12-01"))
#Serie Temporal
serieTemporal <- ts(vendasTreinamento$venda, start=c(2010, 1), end=c(2016, 12), frequency=12)
#Neural Network Time Series Forecasts
fit <- nnetar(serieTemporal, decay=0.5, maxit=150, repeats = 20)
plot(forecast(fit))
lines(serieTemporal)
accuracy(fit)
forecast(fit, 6)
library(forecast)
library(dplyr)
#Leitura do Arquivo vendas.txt
vendasDataSet = read.table('serieVendas.csv', header=TRUE, sep=";")
vendasDataSet$venda<- as.numeric(vendasDataSet$venda)
#Conversion Data
vendasDataSet$data<- as.Date(vendasDataSet$data)
vendasDataSet$venda<- as.numeric(vendasDataSet$venda)
#Filter DataSet
vendasTreinamento <- vendasDataSet %>%
select(data,venda) %>%
filter(data >= as.Date("2010-01-01") & data <= as.Date("2016-12-01"))
#Serie Temporal
serieTemporal <- ts(vendasTreinamento$venda, start=c(2010, 1), end=c(2016, 12), frequency=12)
#Neural Network Time Series Forecasts
fit <- nnetar(serieTemporal, decay=0.5, maxit=150, repeats = 20)
plot(forecast(fit))
lines(serieTemporal)
accuracy(fit)
forecast(fit, 6)
CV(fit)
library(forecast)
CV(fit)
croston(fit)
modelcv <- CVar(serieTemporal, k=5, lambda=0.15)
print(modelcv)
modelcv <- CVar(serieTemporal, k=5, lambda=0.15)
library(forecast)
modelcv <- CVar(serieTemporal, k=5, lambda=0.15)
fitted(fit)
fitNeuralNetwork <- nnetar(serieTemporal, decay=0.5, maxit=150, repeats = 20)
fitArima <- auto.arima(serieTemporal)
fitETS <- ets(serieTemporal)
plot(serieTemporal)
lines(fitted(fitNeuralNetwork), col='red')
lines(fitted(fitArima, h=2), col='green')
lines(fitted(fitETS, h=3), col='blue')
legend("topleft", legend=paste("h =",1:3), col=2:4, lty=1)
plot(serieTemporal)
lines(fitted(fitNeuralNetwork), col='red')
lines(fitted(fitArima, h=2), col='green')
lines(fitted(fitETS, h=3), col='blue')
legend("topleft", legend=paste("h =",c("Neural Network", "Arima", "ETS")), col=2:4, lty=1)
autoplot(serieTemporal)
lines(fitted(fitNeuralNetwork), col='red')
lines(fitted(fitArima, h=2), col='green')
lines(fitted(fitETS, h=3), col='blue')
legend("topleft", legend=paste("h =",c("Neural Network", "Arima", "ETS")), col=2:4, lty=1)
autoplot(serieTemporal)
library(ggplot2)
autoplot(serieTemporal)
lines(fitted(fitNeuralNetwork), col='red')
lines(fitted(fitArima, h=2), col='green')
lines(fitted(fitETS, h=3), col='blue')
legend("topleft", legend=paste("h =",c("Neural Network", "Arima", "ETS")), col=2:4, lty=1)
plot(serieTemporal)
lines(fitted(fitNeuralNetwork), col='red')
lines(fitted(fitArima, h=2), col='green')
lines(fitted(fitETS, h=3), col='blue')
legend("topleft", legend=paste("h =",c("Neural Network", "Arima", "ETS")), col=2:4, lty=1)
