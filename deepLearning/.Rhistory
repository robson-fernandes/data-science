mape <- mape(y = result[, 'Original'], yhat = result[, 'Previsto'])
mape*100
library('neuralnet')
library(forecast)
library(StatMeasures)
dados = read.table('dados.csv', header=TRUE, sep=";")
attach(dados)
training.setOriginal <- dados[1:85, ]
training.set <- training.setOriginal
training.set$mes <- as.double(training.set$mes)
training.set <- scale(training.set)
#conjunto de teste
test.setOriginal <- dados[85:90, ]
test.set = test.setOriginal
test.set$mes <- as.double(test.set$mes)
test.set <- scale(test.set)
#Nova Colecao
data = cbind(training.set[,"mes"],
training.set[,"grupoMilkShake"],
training.set[,"grupoSanduiche"],
training.set[,"grupoBebida"],
training.set[,"grupoAcompanhamento"],
training.set[,"venda"])
colnames(data) = c('mes',
'grupoMilkShake',
'grupoSanduiche',
'grupoBebida',
'grupoAcompanhamento',
'venda')
formula <- as.formula('venda ~ mes + grupoMilkShake + grupoSanduiche + grupoBebida + grupoAcompanhamento')
fit = neuralnet(formula,
data=data,
linear.output=TRUE,
hidden=c(3,2),
threshold =0.01,
rep=5,
algorithm = "backprop")
plot(fit,
col.entry="green",
col.hidden="blue",
col.out="red"
, rep="best")
testdata = test.set[,c("mes","grupoMilkShake" , "grupoSanduiche", "grupoBebida", "grupoAcompanhamento", "venda")]
#predicao
pred = compute(fit,testdata[,1:5])
index <-  1:5
escala <- scale(index)
result = cbind(escala[,1], pred$net.result, testdata[,"venda"])
colnames(result) = c('Attribute', 'Prediction', 'Actual')
round(result, 4)
# prepare data for plot
x = result[,"Attribute"]
y_act = result[,"Actual"]
y_pred = result[,"Prediction"]
par(mfrow=c(1,2))
# plot actual data
plot(x, y_act, pch=20, col=2, xlab='Attribute', ylab="Actual")
lines(x, y_act, col=8, lty=3, lwd=2)
# plot predict data
plot(x, y_pred, pch=20, col=1, xlab='Attribute', ylab="Predict")
lines(x, y_pred, col=8, lty=3, lwd=2)
#Converter Dados em valores originais
vendaOriginal <- test.setOriginal[,"venda"]
s <- pred$net.result
y.sd = sd(vendaOriginal)
y.mean = mean(vendaOriginal)
y.net = s * y.sd + y.mean
y.net
result = cbind(vendaOriginal, y.net)
colnames(result) = c('Original', 'Previsto')
round(result, 4)
#mean absolute percentage error
mape <- mape(y = result[, 'Original'], yhat = result[, 'Previsto'])
mape*100
setwd("~/Documents/projetos/data-science/deepLearning")
library('neuralnet')
library(forecast)
library(StatMeasures)
dados = read.table('dados.csv', header=TRUE, sep=";")
attach(dados)
training.setOriginal <- dados[1:85, ]
training.set <- training.setOriginal
training.set$mes <- as.double(training.set$mes)
training.set <- scale(training.set)
#conjunto de teste
test.setOriginal <- dados[85:90, ]
test.set = test.setOriginal
test.set$mes <- as.double(test.set$mes)
test.set <- scale(test.set)
#Nova Colecao
data = cbind(training.set[,"mes"],
training.set[,"grupoMilkShake"],
training.set[,"grupoSanduiche"],
training.set[,"grupoBebida"],
training.set[,"grupoAcompanhamento"],
training.set[,"venda"])
colnames(data) = c('mes',
'grupoMilkShake',
'grupoSanduiche',
'grupoBebida',
'grupoAcompanhamento',
'venda')
formula <- as.formula('venda ~ mes + grupoMilkShake + grupoSanduiche + grupoBebida + grupoAcompanhamento')
fit = neuralnet(formula,
data=data,
linear.output=TRUE,
hidden=c(3,2),
threshold =0.01,
rep=5,
algorithm = "backprop")
plot(fit,
col.entry="green",
col.hidden="blue",
col.out="red"
, rep="best")
testdata = test.set[,c("mes","grupoMilkShake" , "grupoSanduiche", "grupoBebida", "grupoAcompanhamento", "venda")]
#predicao
pred = compute(fit,testdata[,1:5])
index <-  1:5
escala <- scale(index)
result = cbind(escala[,1], pred$net.result, testdata[,"venda"])
colnames(result) = c('Attribute', 'Prediction', 'Actual')
round(result, 4)
# prepare data for plot
x = result[,"Attribute"]
y_act = result[,"Actual"]
y_pred = result[,"Prediction"]
par(mfrow=c(1,2))
# plot actual data
plot(x, y_act, pch=20, col=2, xlab='Attribute', ylab="Actual")
lines(x, y_act, col=8, lty=3, lwd=2)
# plot predict data
plot(x, y_pred, pch=20, col=1, xlab='Attribute', ylab="Predict")
lines(x, y_pred, col=8, lty=3, lwd=2)
#Converter Dados em valores originais
vendaOriginal <- test.setOriginal[,"venda"]
s <- pred$net.result
y.sd = sd(vendaOriginal)
y.mean = mean(vendaOriginal)
y.net = s * y.sd + y.mean
y.net
result = cbind(vendaOriginal, y.net)
colnames(result) = c('Original', 'Previsto')
round(result, 4)
#mean absolute percentage error
mape <- mape(y = result[, 'Original'], yhat = result[, 'Previsto'])
mape*100
library('neuralnet')
library(forecast)
library(StatMeasures)
dados = read.table('dados.csv', header=TRUE, sep=";")
attach(dados)
training.setOriginal <- dados[1:85, ]
training.set <- training.setOriginal
training.set$mes <- as.double(training.set$mes)
training.set <- scale(training.set)
#conjunto de teste
test.setOriginal <- dados[85:90, ]
test.set = test.setOriginal
test.set$mes <- as.double(test.set$mes)
test.set <- scale(test.set)
#Nova Colecao
data = cbind(training.set[,"mes"],
training.set[,"grupoMilkShake"],
training.set[,"grupoSanduiche"],
training.set[,"grupoBebida"],
training.set[,"grupoAcompanhamento"],
training.set[,"venda"])
colnames(data) = c('mes',
'grupoMilkShake',
'grupoSanduiche',
'grupoBebida',
'grupoAcompanhamento',
'venda')
formula <- as.formula('venda ~ mes + grupoMilkShake + grupoSanduiche + grupoBebida + grupoAcompanhamento')
fit = neuralnet(formula,
data=data,
linear.output=TRUE,
hidden=c(3,2),
threshold =0.01,
rep=5,
algorithm = "backprop")
library('neuralnet')
library(forecast)
library(StatMeasures)
dados = read.table('dados.csv', header=TRUE, sep=";")
attach(dados)
training.setOriginal <- dados[1:85, ]
training.set <- training.setOriginal
training.set$mes <- as.double(training.set$mes)
training.set <- scale(training.set)
#conjunto de teste
test.setOriginal <- dados[85:90, ]
test.set = test.setOriginal
test.set$mes <- as.double(test.set$mes)
test.set <- scale(test.set)
#Nova Colecao
data = cbind(training.set[,"mes"],
training.set[,"grupoMilkShake"],
training.set[,"grupoSanduiche"],
training.set[,"grupoBebida"],
training.set[,"grupoAcompanhamento"],
training.set[,"venda"])
colnames(data) = c('mes',
'grupoMilkShake',
'grupoSanduiche',
'grupoBebida',
'grupoAcompanhamento',
'venda')
formula <- as.formula('venda ~ mes + grupoMilkShake + grupoSanduiche + grupoBebida + grupoAcompanhamento')
fit = neuralnet(formula,
data=data,
linear.output=TRUE,
hidden=c(3,2),
threshold =0.01,
rep=5,
algorithm = "rprop+")
plot(fit,
col.entry="green",
col.hidden="blue",
col.out="red"
, rep="best")
testdata = test.set[,c("mes","grupoMilkShake" , "grupoSanduiche", "grupoBebida", "grupoAcompanhamento", "venda")]
#predicao
pred = compute(fit,testdata[,1:5])
index <-  1:5
escala <- scale(index)
result = cbind(escala[,1], pred$net.result, testdata[,"venda"])
colnames(result) = c('Attribute', 'Prediction', 'Actual')
round(result, 4)
# prepare data for plot
x = result[,"Attribute"]
y_act = result[,"Actual"]
y_pred = result[,"Prediction"]
par(mfrow=c(1,2))
# plot actual data
plot(x, y_act, pch=20, col=2, xlab='Attribute', ylab="Actual")
lines(x, y_act, col=8, lty=3, lwd=2)
# plot predict data
plot(x, y_pred, pch=20, col=1, xlab='Attribute', ylab="Predict")
lines(x, y_pred, col=8, lty=3, lwd=2)
#Converter Dados em valores originais
vendaOriginal <- test.setOriginal[,"venda"]
s <- pred$net.result
y.sd = sd(vendaOriginal)
y.mean = mean(vendaOriginal)
y.net = s * y.sd + y.mean
y.net
result = cbind(vendaOriginal, y.net)
colnames(result) = c('Original', 'Previsto')
round(result, 4)
#mean absolute percentage error
mape <- mape(y = result[, 'Original'], yhat = result[, 'Previsto'])
mape*100
plot(fit,
col.entry="green",
col.hidden="blue",
col.out="red"
, rep="best")
library('neuralnet')
library(forecast)
library(StatMeasures)
dados = read.table('dados.csv', header=TRUE, sep=";")
attach(dados)
training.setOriginal <- dados[1:85, ]
training.set <- training.setOriginal
training.set$mes <- as.double(training.set$mes)
training.set <- scale(training.set)
#conjunto de teste
test.setOriginal <- dados[85:90, ]
test.set = test.setOriginal
test.set$mes <- as.double(test.set$mes)
test.set <- scale(test.set)
#Nova Colecao
data = cbind(training.set[,"mes"],
training.set[,"grupoMilkShake"],
training.set[,"grupoSanduiche"],
training.set[,"grupoBebida"],
training.set[,"grupoAcompanhamento"],
training.set[,"venda"])
colnames(data) = c('mes',
'grupoMilkShake',
'grupoSanduiche',
'grupoBebida',
'grupoAcompanhamento',
'venda')
formula <- as.formula('venda ~ mes + grupoMilkShake + grupoSanduiche + grupoBebida + grupoAcompanhamento')
fit = neuralnet(formula,
data=data,
linear.output=TRUE,
hidden=c(3,2),
threshold =0.01,
rep=5)
plot(fit,
col.entry="green",
col.hidden="blue",
col.out="red"
, rep="best")
testdata = test.set[,c("mes","grupoMilkShake" , "grupoSanduiche", "grupoBebida", "grupoAcompanhamento", "venda")]
#predicao
pred = compute(fit,testdata[,1:5])
index <-  1:5
escala <- scale(index)
result = cbind(escala[,1], pred$net.result, testdata[,"venda"])
colnames(result) = c('Attribute', 'Prediction', 'Actual')
round(result, 4)
# prepare data for plot
x = result[,"Attribute"]
y_act = result[,"Actual"]
y_pred = result[,"Prediction"]
par(mfrow=c(1,2))
# plot actual data
plot(x, y_act, pch=20, col=2, xlab='Attribute', ylab="Actual")
lines(x, y_act, col=8, lty=3, lwd=2)
# plot predict data
plot(x, y_pred, pch=20, col=1, xlab='Attribute', ylab="Predict")
lines(x, y_pred, col=8, lty=3, lwd=2)
#Converter Dados em valores originais
vendaOriginal <- test.setOriginal[,"venda"]
s <- pred$net.result
y.sd = sd(vendaOriginal)
y.mean = mean(vendaOriginal)
y.net = s * y.sd + y.mean
y.net
result = cbind(vendaOriginal, y.net)
colnames(result) = c('Original', 'Previsto')
round(result, 4)
#mean absolute percentage error
mape <- mape(y = result[, 'Original'], yhat = result[, 'Previsto'])
mape*100
library('neuralnet')
library(forecast)
library(StatMeasures)
dados = read.table('dados.csv', header=TRUE, sep=";")
attach(dados)
training.setOriginal <- dados[1:85, ]
training.set <- training.setOriginal
training.set$mes <- as.double(training.set$mes)
training.set <- scale(training.set)
#conjunto de teste
test.setOriginal <- dados[85:90, ]
test.set = test.setOriginal
test.set$mes <- as.double(test.set$mes)
test.set <- scale(test.set)
#Nova Colecao
data = cbind(training.set[,"mes"],
training.set[,"grupoMilkShake"],
training.set[,"grupoSanduiche"],
training.set[,"grupoBebida"],
training.set[,"grupoAcompanhamento"],
training.set[,"venda"])
colnames(data) = c('mes',
'grupoMilkShake',
'grupoSanduiche',
'grupoBebida',
'grupoAcompanhamento',
'venda')
formula <- as.formula('venda ~ mes + grupoMilkShake + grupoSanduiche + grupoBebida + grupoAcompanhamento')
fit = neuralnet(formula,
data=data,
linear.output=TRUE,
hidden=c(3,2),
threshold =0.01,
rep=5,
algorithm = "rprop+")
plot(fit,
col.entry="green",
col.hidden="blue",
col.out="red"
, rep="best")
testdata = test.set[,c("mes","grupoMilkShake" , "grupoSanduiche", "grupoBebida", "grupoAcompanhamento", "venda")]
#predicao
pred = compute(fit,testdata[,1:5])
index <-  1:5
escala <- scale(index)
result = cbind(escala[,1], pred$net.result, testdata[,"venda"])
colnames(result) = c('Attribute', 'Prediction', 'Actual')
round(result, 4)
# prepare data for plot
x = result[,"Attribute"]
y_act = result[,"Actual"]
y_pred = result[,"Prediction"]
par(mfrow=c(1,2))
# plot actual data
plot(x, y_act, pch=20, col=2, xlab='Attribute', ylab="Actual")
lines(x, y_act, col=8, lty=3, lwd=2)
# plot predict data
plot(x, y_pred, pch=20, col=1, xlab='Attribute', ylab="Predict")
lines(x, y_pred, col=8, lty=3, lwd=2)
#Converter Dados em valores originais
vendaOriginal <- test.setOriginal[,"venda"]
s <- pred$net.result
y.sd = sd(vendaOriginal)
y.mean = mean(vendaOriginal)
y.net = s * y.sd + y.mean
y.net
result = cbind(vendaOriginal, y.net)
colnames(result) = c('Original', 'Previsto')
round(result, 4)
#mean absolute percentage error
mape <- mape(y = result[, 'Original'], yhat = result[, 'Previsto'])
mape*100
library('neuralnet')
library(forecast)
library(StatMeasures)
dados = read.table('dados.csv', header=TRUE, sep=";")
attach(dados)
training.setOriginal <- dados[1:85, ]
training.set <- training.setOriginal
training.set$mes <- as.double(training.set$mes)
training.set <- scale(training.set)
#conjunto de teste
test.setOriginal <- dados[85:90, ]
test.set = test.setOriginal
test.set$mes <- as.double(test.set$mes)
test.set <- scale(test.set)
#Nova Colecao
data = cbind(training.set[,"mes"],
training.set[,"grupoMilkShake"],
training.set[,"grupoSanduiche"],
training.set[,"grupoBebida"],
training.set[,"grupoAcompanhamento"],
training.set[,"venda"])
colnames(data) = c('mes',
'grupoMilkShake',
'grupoSanduiche',
'grupoBebida',
'grupoAcompanhamento',
'venda')
formula <- as.formula('venda ~ mes + grupoMilkShake + grupoSanduiche + grupoBebida + grupoAcompanhamento')
fit = neuralnet(formula,
data=data,
linear.output=TRUE,
hidden=c(3,2),
threshold =0.01,
rep=5,
algorithm = "rprop+")
plot(fit,
col.entry="green",
col.hidden="blue",
col.out="red"
, rep="best")
testdata = test.set[,c("mes","grupoMilkShake" , "grupoSanduiche", "grupoBebida", "grupoAcompanhamento", "venda")]
#predicao
pred = compute(fit,testdata[,1:5])
index <-  1:5
escala <- scale(index)
result = cbind(escala[,1], pred$net.result, testdata[,"venda"])
colnames(result) = c('Attribute', 'Prediction', 'Actual')
round(result, 4)
# prepare data for plot
x = result[,"Attribute"]
y_act = result[,"Actual"]
y_pred = result[,"Prediction"]
par(mfrow=c(1,2))
# plot actual data
plot(x, y_act, pch=20, col=2, xlab='Attribute', ylab="Actual")
lines(x, y_act, col=8, lty=3, lwd=2)
# plot predict data
plot(x, y_pred, pch=20, col=1, xlab='Attribute', ylab="Predict")
lines(x, y_pred, col=8, lty=3, lwd=2)
#Converter Dados em valores originais
vendaOriginal <- test.setOriginal[,"venda"]
s <- pred$net.result
y.sd = sd(vendaOriginal)
y.mean = mean(vendaOriginal)
y.net = s * y.sd + y.mean
y.net
result = cbind(vendaOriginal, y.net)
colnames(result) = c('Original', 'Previsto')
round(result, 4)
#mean absolute percentage error
mape <- mape(y = result[, 'Original'], yhat = result[, 'Previsto'])
mape*100
setwd("~/Documents/projetos/data-science/deepLearning")
library(corrplot)
dados = read.table('dados.csv', header=TRUE, sep=";")
attach(dados)
training.setOriginal <- dados[1:85, ]
training.set <- training.setOriginal
training.set$mes <- as.double(training.set$mes)
training.set <- scale(training.set)
M <- cor(training.set)
#Matriz de correlacao - Color
corrplot(M, method="color")
library(corrplot)
dados = read.table('dados.csv', header=TRUE, sep=";")
attach(dados)
training.setOriginal <- dados[1:85, ]
training.set <- training.setOriginal
training.set$mes <- as.double(training.set$mes)
training.set <- scale(training.set)
M <- cor(training.set)
#Matriz de correlacao - Color
corrplot(M, method="color")
#Matriz de correlacao - Numerico
corrplot(M, method="number")
M
cor(training.set)
library(corrplot)
dados = read.table('dados.csv', header=TRUE, sep=";")
attach(dados)
training.setOriginal <- dados[1:85, ]
training.set <- training.setOriginal
training.set$mes <- as.double(training.set$mes)
training.set <- scale(training.set)
M <- cor(training.set,method = "pearson")
#Matriz de correlacao - Color
corrplot(M, method="color")
#Matriz de correlacao - Numerico
corrplot(M, method="number")
M
