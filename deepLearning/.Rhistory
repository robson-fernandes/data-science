##Tempo de interesse
tempo<-seq(0,200,1)
covariaveis1<-c(1,0,0,0,1,0,1,0)
betas<-c(2.2619,2.2783,1.8414,1.5244,0.2614,-0.0836,0.1251,-0.0197)
Y1<-plnorm(tempo, meanlog = betas%*%covariaveis, sdlog = 1.24, log = FALSE)
##Tempo de interesse
tempo<-seq(0,200,1)
covariaveis1<-c(1,0,0,0,1,0,1,0)
betas<-c(2.2619,2.2783,1.8414,1.5244,0.2614,-0.0836,0.1251,-0.0197)
Y1<-plnorm(tempo, meanlog = betas%*%covariaveis, sdlog = 1.24, log = FALSE)
Y1
##Tempo de interesse
tempo<-seq(0,200,1)
##Tempo de interesse
tempo<-seq(0,200,1)
covariaveis1<-c(1,0,0,0,1,0,1,0)
betas<-c(2.2619,2.2783,1.8414,1.5244,0.2614,-0.0836,0.1251,-0.0197)
plnorm(tempo, meanlog = betas%*%covariaveis, sdlog = 1.24, log = FALSE)
##Tempo de interesse
tempo<-seq(0,200,1)
covariaveis1<-c(1,0,0,0,1,0,1,0)
betas<-c(2.2619,2.2783,1.8414,1.5244,0.2614,-0.0836,0.1251,-0.0197)
Y1<-plnorm(tempo, meanlog = betas%*%covariaveis1, sdlog = 1.24, log = FALSE)
Y1
##Tempo de interesse
tempo<-seq(0,200,1)
covariaveis1<-c(1,0,0,0,1,0,1,0)
betas<-c(2.2619,2.2783,1.8414,1.5244,0.2614,-0.0836,0.1251,-0.0197)
Y1<-plnorm(tempo, meanlog = betas%*%covariaveis1, sdlog = 1.24, log = FALSE)
summary(Y1)
##Tempo de interesse
tempo<-seq(0,200,1)
covariaveis1<-c(1,0,0,0,1,0,1,0)
betas<-c(2.2619,2.2783,1.8414,1.5244,0.2614,-0.0836,0.1251,-0.0197)
Y1<-plnorm(tempo, meanlog = betas%*%covariaveis1, sdlog = 1.24, log = FALSE)
mean(Y1)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
plot(res)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- gs(bn_df)
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- mmhc(bn_df)
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
library(bnlearn)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
plot(res)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
res$arcs
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
res$arcs
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
res$arcs
plot(res)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
res$arcs
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
fittedbn <- bn.fit(res, data = bn_df)
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
fittedbn <- bn.fit(res, data = bn_df)
cpquery(fittedbn, event = (Proteins=="<3"), evidence = ( Smoking=="no") )
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
fittedbn <- bn.fit(res, data = bn_df)
cpquery(fittedbn, event = (Proteins=="<3"), evidence = ( Smoking=="no") )
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
fittedbn <- bn.fit(res, data = bn_df)
cpquery(fittedbn, event = (Proteins=="<3"), evidence = ( Smoking=="no") )
library(bnlearn)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")
plot(res)
fittedbn <- bn.fit(res, data = bn_df)
cpquery(fittedbn, event = (Proteins=="<3"), evidence = ( Smoking=="no") )
library(e1071)
duration = c(1,3,5,6,8,10,15)
kurtosis(duration)
var(duration)
moment(c)
library(e1071)
c = c(1,3,5,6,8,10,15)
moment(c)
sd(c)
sd(c)
moment(c)
sd(c)
sd(c)^4
library(e1071)
c = c(1,3,5,6,8,10,15)
desvioPadrao = sd(c)
variancia  = var(c)
k = 1
momento1 = desvioPadrao^k / variancia^k
library(e1071)
c = c(1,3,5,6,8,10,15)
desvioPadrao = sd(c)
variancia  = var(c)
k = 1
momento1 = desvioPadrao^k / variancia^k
library(e1071)
c = c(1,3,5,6,8,10,15)
desvioPadrao = sd(c)
variancia  = var(c)
k = 1
momento1 = desvioPadrao^k / variancia^k
momento1
moment(c)
library(e1071)
c = c(1,3,5,6,8,10,15)
desvioPadrao = sd(c)
variancia  = var(c)
k = 1
momento1 = desvioPadrao^k / variancia^k
momento1
moment(c)
moment(c, order=1, center=TRUE)
k = 1
momento1 = desvioPadrao^k / variancia^k
momento1
moment(c, order=1, center=TRUE)
moment(c, order=1)
moment(c, order=2)
k = 2
momento1 = desvioPadrao^k / variancia^k
momento1
mean(c)
moment(c, order=1)
desvioPadrao = sd(c)
variancia  = var(c)
moment(c, order=1)
moment(c, order=4)
kurtosis(c)
skewness(c)
moment(c, order=2)
moment(c, order=1)
moment(c, order=2)
moment(c)
moment(c)
moment(c)
moment(c, order=1,center = TRUE)
moment(c, order=2,center = TRUE)
moment(c, order=2,center = TRUE)
variancia  = var(c)
variancia  = var(c)
variancia
moment(c, order=2,center = TRUE)
moment(c, order=3,center = TRUE)
moment(c, order=1,center = TRUE)
-12.428 + 12.429
-12.428 + 12.429 / 6
(-12.428 + 12.429) / 6
moment(c, order=1,center = TRUE)
(-12.428 + 12.429) / 6
moment(c, order=2,center = TRUE)
k = 2
momento1 =  variancia^k / desvioPadrao^k
momento1
k = 1
momento1 =  variancia^k / desvioPadrao^k
momento1
k = 1
momento1 =  variancia^k / desvioPadrao^k
momento1
k = 2
momento1 =  variancia^k / desvioPadrao^k
momento1
library(bnlearn)
library(Rgraphviz)
vendaProdutosDataSet = read.table('vendaProdutos.csv', header=TRUE, sep=";")
attach(vendaProdutosDataSet)
#Modelo da Rede Bayesiana
dag <- model2network("[codProduto][codGrupoVenda|codProduto][quantidadeIntervalo|codGrupoVenda][vendaIntervalo|quantidadeIntervalo:codGrupoVenda][desDiaSemana|vendaIntervalo]")
plot(dag)
#Limpa workspace
ls()
rm(list=ls())
graphics.off()
library(arm)
library(StatMeasures)
dados.grupos = read.table('dados-grupos.csv', header=TRUE, sep=";")
attach(dados.grupos)
dados.vendas = read.table('dados-vendas.csv', header=TRUE, sep=";")
attach(dados.vendas)
dados <-  cbind(dados.grupos$mes,
dados.grupos$quantidadeProduto,
dados.vendas$venda,
dados.grupos$grupoMilkShake,
dados.grupos$grupoSanduiche,
dados.grupos$grupoBebida,
dados.grupos$grupoAcompanhamento,
dados.grupos$grupoPrato,
dados.grupos$grupoAdicional,
dados.grupos$grupoBrinde,
dados.grupos$grupoItensComposicao)
colnames(dados) <- c("mes",
"quantidadeProduto",
"venda",
"grupoMilkShake",
"grupoSanduiche",
"grupoBebida",
"grupoAcompanhamento",
"grupoPrato",
"grupoAdicional",
"grupoBrinde",
"grupoItensComposicao"
)
training.setOriginal <- dados[1:80, ]
training.set <- training.setOriginal
training.set[,"mes"] <- as.double(training.set[,"mes"])
training.set <- scale(training.set)
training.set <- as.data.frame(training.set)
#conjunto de teste
test.setOriginal <- dados[80:90, ]
test.set = test.setOriginal
test.set$mes <- as.double(test.set$mes)
test.set <- scale(test.set)
test.set <- as.data.frame(test.set)
#Nova Colecao
data = cbind(training.set[,"mes"],
training.set[,"quantidadeProduto"],
training.set[,"grupoMilkShake"],
training.set[,"grupoSanduiche"],
training.set[,"grupoBebida"],
training.set[,"grupoAcompanhamento"],
training.set[,"grupoPrato"],
training.set[,"grupoAdicional"],
training.set[,"grupoBrinde"],
training.set[,"venda"])
colnames(data) = c('mes',
'quantidadeProduto',
'grupoMilkShake',
'grupoSanduiche',
'grupoBebida',
'grupoAcompanhamento',
"grupoPrato",
"grupoAdicional",
"grupoBrinde",
'venda')
testdata = test.set[,
c('mes',
'quantidadeProduto',
'grupoMilkShake',
'grupoSanduiche',
'grupoBebida',
'grupoAcompanhamento',
"grupoPrato",
"grupoAdicional",
"grupoBrinde",
'venda')]
df.testeData = as.data.frame(testdata)
fit.bayes <- bayesglm(venda ~
quantidadeProduto  +
grupoMilkShake +
grupoSanduiche +
grupoBebida +
grupoAcompanhamento +
grupoPrato +
grupoAdicional
,
family=gaussian(link=identity),
data=training.set,
prior.df= Inf,
prior.mean = 0,
prior.scale = NULL,
maxit = 10000)
summary(fit.bayes)
ypred.bayes <- predict.glm(fit.bayes,newdata = test.set,se.fit = T)
#Funcao Escala para Original
scaleToOriginal <- function(value,prediction){
s <- prediction
y.sd = sd(value)
y.mean = mean(value)
y.net = s * y.sd + y.mean
return(y.net)
}
#Converter Dados em valores originais
vendaOriginal <- test.setOriginal[,"venda"]
pred <- ypred.bayes$fit
y.net = scaleToOriginal(vendaOriginal,pred)
result = cbind(vendaOriginal, y.net, c(1:11))
colnames(result) = c('original', 'previsto','indice')
round(result, 4)
#mean absolute percentage error
mape <- mape(y = result[, 'original'], yhat = result[, 'previsto'])
mape*100
library(plotly)
r.df = as.data.frame(result)
f <- list(
family = "Verdana",
size = 14,
color = "#000000"
)
x <- list(
title = "Indice",
titlefont = f
)
y <- list(
title = "Venda",
titlefont = f
)
p <- plot_ly(r.df,
x = ~indice,
y = ~original,
name = "Original",
type = 'scatter',
mode = 'lines') %>%
layout(xaxis = x, yaxis = y)  %>%
add_trace(y = ~previsto , name = "Bayesian Generalized Linear Models", connectgaps = TRUE)
p
setwd("~/Documents/projetos/data-science/deepLearning")
#Limpa workspace
ls()
rm(list=ls())
graphics.off()
library(arm)
library(StatMeasures)
dados.grupos = read.table('dados-grupos.csv', header=TRUE, sep=";")
attach(dados.grupos)
dados.vendas = read.table('dados-vendas.csv', header=TRUE, sep=";")
attach(dados.vendas)
dados <-  cbind(dados.grupos$mes,
dados.grupos$quantidadeProduto,
dados.vendas$venda,
dados.grupos$grupoMilkShake,
dados.grupos$grupoSanduiche,
dados.grupos$grupoBebida,
dados.grupos$grupoAcompanhamento,
dados.grupos$grupoPrato,
dados.grupos$grupoAdicional,
dados.grupos$grupoBrinde,
dados.grupos$grupoItensComposicao)
colnames(dados) <- c("mes",
"quantidadeProduto",
"venda",
"grupoMilkShake",
"grupoSanduiche",
"grupoBebida",
"grupoAcompanhamento",
"grupoPrato",
"grupoAdicional",
"grupoBrinde",
"grupoItensComposicao"
)
training.setOriginal <- dados[1:80, ]
training.set <- training.setOriginal
training.set[,"mes"] <- as.double(training.set[,"mes"])
training.set <- scale(training.set)
training.set <- as.data.frame(training.set)
#conjunto de teste
test.setOriginal <- dados[80:90, ]
test.set = test.setOriginal
test.set$mes <- as.double(test.set$mes)
test.set <- scale(test.set)
test.set <- as.data.frame(test.set)
#Nova Colecao
data = cbind(training.set[,"mes"],
training.set[,"quantidadeProduto"],
training.set[,"grupoMilkShake"],
training.set[,"grupoSanduiche"],
training.set[,"grupoBebida"],
training.set[,"grupoAcompanhamento"],
training.set[,"grupoPrato"],
training.set[,"grupoAdicional"],
training.set[,"grupoBrinde"],
training.set[,"venda"])
colnames(data) = c('mes',
'quantidadeProduto',
'grupoMilkShake',
'grupoSanduiche',
'grupoBebida',
'grupoAcompanhamento',
"grupoPrato",
"grupoAdicional",
"grupoBrinde",
'venda')
testdata = test.set[,
c('mes',
'quantidadeProduto',
'grupoMilkShake',
'grupoSanduiche',
'grupoBebida',
'grupoAcompanhamento',
"grupoPrato",
"grupoAdicional",
"grupoBrinde",
'venda')]
df.testeData = as.data.frame(testdata)
fit.bayes <- bayesglm(venda ~
quantidadeProduto  +
grupoMilkShake +
grupoSanduiche +
grupoBebida +
grupoAcompanhamento +
grupoPrato +
grupoAdicional
,
family=gaussian(link=identity),
data=training.set,
prior.df= Inf,
prior.mean = 0,
prior.scale = NULL,
maxit = 10000)
summary(fit.bayes)
ypred.bayes <- predict.glm(fit.bayes,newdata = test.set,se.fit = T)
#Funcao Escala para Original
scaleToOriginal <- function(value,prediction){
s <- prediction
y.sd = sd(value)
y.mean = mean(value)
y.net = s * y.sd + y.mean
return(y.net)
}
#Converter Dados em valores originais
vendaOriginal <- test.setOriginal[,"venda"]
pred <- ypred.bayes$fit
y.net = scaleToOriginal(vendaOriginal,pred)
result = cbind(vendaOriginal, y.net, c(1:11))
colnames(result) = c('original', 'previsto','indice')
round(result, 4)
#mean absolute percentage error
mape <- mape(y = result[, 'original'], yhat = result[, 'previsto'])
mape*100
library(plotly)
r.df = as.data.frame(result)
f <- list(
family = "Verdana",
size = 14,
color = "#000000"
)
x <- list(
title = "Indice",
titlefont = f
)
y <- list(
title = "Venda",
titlefont = f
)
p <- plot_ly(r.df,
x = ~indice,
y = ~original,
name = "Original",
type = 'scatter',
mode = 'lines') %>%
layout(xaxis = x, yaxis = y)  %>%
add_trace(y = ~previsto , name = "Bayesian Generalized Linear Models", connectgaps = TRUE)
p
